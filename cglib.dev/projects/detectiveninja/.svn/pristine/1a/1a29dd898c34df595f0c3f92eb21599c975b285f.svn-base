#include "Enemy.h"

namespace proj {

	Enemy::Enemy(std::string id, cg::Vector3d position) : cg::Entity(id) {
		_physics.setPosition(position[0],position[1],position[2]);
	}
	Enemy::~Enemy() {}

	void Enemy::init() {

		_physics.setLinearVelocity(25.0);
		_physics.setAngularVelocity(100.0);
		_physics.setAxesScale(12.0);

		_isRunning = false;

		_headWidth =  3.0f;
		_headLength = 2.0f;
		_headHeight = 4.0f;

		_bodyWidth =  5.0f;
		_bodyLength = 3.0f;
		_bodyHeight = 4.0f;

		_armWidth =  1.0f;
		_armLength = 1.0f;
		_armHeight = 3.0f;

		_legWidth =  1.0f;
		_legLength = 1.0f;
		_legHeight = 3.0f;

		_bodyAngle = 0.0f;

		_armAngle[0] = 0.0f;
		_armAngle[1] = 0.0f;
		_armRotationVector[0].set(1,0,0);
		_armRotationVector[1].set(1,0,0);

		_legAngle[0] = 0.0f;
		_legAngle[1] = 0.0f;
		_legRotationVector[0].set(1,0,0);
		_legRotationVector[1].set(1,0,0);

		_legDirection[0] = true;
		_legDirection[1] = false;

		_jumpKeyReleased = true;

		CollisionManager *collisionManager = (CollisionManager*)cg::Registry::instance()->get("CollisionManager");
		collisionManager->registerEnemy(dynamic_cast<Collidable*>(cg::Registry::instance()->get(getId())));
		createBoundingSpheres();
	}
	
	void Enemy::update(unsigned long elapsed_millis) {

		double elapsed_seconds = elapsed_millis / (double)1000;
		_physics.step(elapsed_seconds);

		updateBoundingSpheres();
	}

	void Enemy::draw() {

		if (isDebug()) {
			_physics.drawAxes();

			glDisable(GL_LIGHTING);

			for (int i = 0; i < getBoundingSpheres()->size(); i++) {

				float* color = getBoundingSphere(i)->getColor();

				glPushMatrix();
					glColor3f(color[0], color[1], color[2]);
					glTranslatef(getBoundingSphere(i)->getPosition()[0],
						getBoundingSphere(i)->getPosition()[1],
						getBoundingSphere(i)->getPosition()[2]);
					glutWireSphere(getBoundingSphere(i)->getRadius(), 20, 20);
				glPopMatrix();
			}

			glEnable(GL_LIGHTING);
		}

		updateAngles();

		glPushMatrix();
		_physics.applyTransforms();
		
		// left leg
		glPushMatrix();
			if (_physics.isJumping()) {
				glTranslatef(-(_legWidth + _bodyWidth) / 5.0f, 1.0f, _legHeight - 0.5f);
			}
			else {
				glTranslatef(-(_legWidth + _bodyWidth) / 5.0f, 0.0f, _legHeight);
			}
			glRotatef(_legAngle[0], _legRotationVector[0][0], _legRotationVector[0][1], _legRotationVector[0][2]);
			glTranslatef(0.0f, 0.0f, -_legHeight / 2.0f);
			glScalef(_legWidth, _legLength, _legHeight);
			unitCube();
		glPopMatrix();

		// right leg
		glPushMatrix();
			glTranslatef((_legWidth + _bodyWidth) / 5.0f, 0.0f, _legHeight);
			glRotatef(_legAngle[1], _legRotationVector[1][0], _legRotationVector[1][1], _legRotationVector[1][2]);
			glTranslatef(0.0f, 0.0f, -_legHeight / 2.0f);
			glScalef(_legWidth, _legLength, _legHeight);
			unitCube();
		glPopMatrix();

		// left arm
		glPushMatrix();
			if (_physics.isDoubleJumping()) {
				glTranslatef(-_bodyWidth / 2.0f, 0.0f, _armHeight + _legHeight - 0.5);
			}
			else if (_physics.isJumping()) {
				glTranslatef(-_bodyWidth / 2.0f, 1.0f, _armHeight + _legHeight - 1.0f);
			}
			else if (_isRunning) {
				glTranslatef(-_bodyWidth / 2.0f, 1.5f, _armHeight + _legHeight - 1.0f);
			}
			else {
				glTranslatef(-_bodyWidth / 2.0f, 0.0f, _armHeight + _legHeight);
			}
			glRotatef(_armAngle[0], _armRotationVector[0][0], _armRotationVector[0][1], _armRotationVector[0][2]);
			glTranslatef(-_armWidth / 2.0f, 0.0f, -_armHeight / 2.0f);
			glScalef(_armWidth, _armLength, _armHeight);
			unitCube();
		glPopMatrix();

		// right arm
		glPushMatrix();
			if (_physics.isDoubleJumping()) {
				glTranslatef(_bodyWidth / 2.0f, 0.0f, _armHeight + _legHeight - 0.5);
			}
			else if (_physics.isJumping()) {
				glTranslatef(_bodyWidth / 2.0f, 2.0f, _armHeight + _legHeight - 1.0f);
			}
			else if (_isRunning) {
				glTranslatef(_bodyWidth / 2.0f, 1.5f, _armHeight + _legHeight - 1.0f);
			}
			else {
				glTranslatef(_bodyWidth / 2.0f, 0.0f, _armHeight + _legHeight);
			}
			glRotatef(_armAngle[1], _armRotationVector[1][0], _armRotationVector[1][1], _armRotationVector[1][2]);
			glTranslatef(_armWidth / 2.0f, 0.0f, -_armHeight / 2.0f);
			glScalef(_armWidth, _armLength, _armHeight);
			unitCube();
		glPopMatrix();

		// body
		glPushMatrix();
			glTranslatef(0.0f, 0.0f, _legHeight - 0.5f);
			glRotatef(_bodyAngle, 1.0f, 0.0f, 0.0f);
			glTranslatef(0.0f, 0.0f, _bodyHeight / 2.0f);
			glScalef(_bodyWidth, _bodyLength, _bodyHeight);
			unitCube();
		glPopMatrix();

		if (_bodyAngle < 0.0f) {
			glTranslatef(0.0f, 2.5f, -0.75f);
		}

		// head
		glPushMatrix();
			glTranslatef(0.0f, 0.0f, _headHeight / 2.0f + _bodyHeight + _legHeight - 1.75f);
			glScalef(_headWidth, _headLength, _headHeight);
			unitCube();
		glPopMatrix();

		glPopMatrix();
	}

	void Enemy::setHeight(int height) {
		_physics.setPosition(getPosition()[0], getPosition()[1], height);
	}

	cg::Vector3d Enemy::getPosition() {
		return _physics.getPosition();
	}

	void Enemy::toggleDebug() {
		switchDebug();
	}

	void Enemy::createBoundingSpheres() {

		// main bounding sphere
		double r = (_headHeight + _bodyHeight + _legHeight) / 2 - 0.7f;
		cg::Vector3d p(getPosition()[0], getPosition()[1], getPosition()[2] + r);
		BoundingSphere *b = new BoundingSphere(r, p);

		addBoundingSphere(b);

		// vision bounding spheres
		double prevR = r;
		r = _headHeight / 2 - 1.0f;

		cg::Vector3d prevP;
		p.set(getPosition()[0], getPosition()[1] + prevR + r, getPosition()[2] + _legHeight + _bodyHeight);

		int maxNBoundingSpheres = 5;
		for (int i = 0; i <= maxNBoundingSpheres; i++) {
			
			b = new BoundingSphere(r, p);
			addBoundingSphere(b);

			prevR = r; r += 1.0f;
			prevP.set(p[0], p[1], p[2]); p.set(prevP[0], prevP[1] + prevR + r, prevP[2]); 
		}
	}

	void Enemy::updateBoundingSpheres() {
		// TODO
	}

	void Enemy::unitCube() {
		glScalef(0.5f,0.5f,0.5f);
		cube(5, -1,-1,1,1, 0,1,0, 0,0,1,1);
	}

	void Enemy::cube(int n, 
		double x0, double y0, double x1, double y1,
		double nx, double ny, double nz,
		double tx0, double ty0, double tx1, double ty1) {

		// front
		glPushMatrix();
			glTranslatef(0,1,0);
			dividedPlane(n, x0,y0,x1,y1, nx,ny,nz, tx0,ty0,tx1,ty1);
		glPopMatrix();
		// back
		glPushMatrix();
			glTranslatef(0,-1,0);
			glRotatef(180, 1,0,0);
			dividedPlane(n, x0,y0,x1,y1, nx,ny,nz, tx0,ty0,tx1,ty1);
		glPopMatrix();
		// top
		glPushMatrix();
			glTranslatef(0,0,1);
			glRotatef(90,1,0,0);
			dividedPlane(n, x0,y0,x1,y1, nx,ny,nz, tx0,ty0,tx1,ty1);
		glPopMatrix();
		// bottom
		glPushMatrix();
			glTranslatef(0,0,-1);
			glRotatef(-90,1,0,0);
			dividedPlane(n, x0,y0,x1,y1, nx,ny,nz, tx0,ty0,tx1,ty1);
		glPopMatrix();
		// right
		glPushMatrix();
			glTranslatef(1,0,0);
			glRotatef(-90,0,0,1);
			dividedPlane(n, x0,y0,x1,y1, nx,ny,nz, tx0,ty0,tx1,ty1);
		glPopMatrix();
		// left
		glPushMatrix();
			glTranslatef(-1,0,0);
			glRotatef(90,0,0,1);
			dividedPlane(n, x0,y0,x1,y1, nx,ny,nz, tx0,ty0,tx1,ty1);
		glPopMatrix();
	}

	void Enemy::dividedPlane(int n, 
		double x0, double y0, double x1, double y1,
		double nx, double ny, double nz,
		double tx0, double ty0, double tx1, double ty1) 
	{
		int countx = 0;
		int county = 0;
		double x = x0;
		double y = y0;
		double stepx = (x1 - x0) / (double) n;
		double stepy = (y1 - y0) / (double) n;
		double tx = tx0;
		double ty = ty0;
		double steptx = (tx1 - tx0) / (double) n;
		double stepty = (ty1 - ty0) / (double) n;

		glBegin(GL_QUADS);
		glNormal3d(nx, ny, nz);

		while (countx != n) {

			while (county != n) {

				glTexCoord2d(tx, ty);
				glVertex3d(x, 0, y);
				glTexCoord2d(tx + steptx, ty);
				glVertex3d(x + stepx, 0, y);
				glTexCoord2d(tx + steptx, ty + stepty);
				glVertex3d(x + stepx, 0, y + stepy);
				glTexCoord2d(tx, ty + stepty);
				glVertex3d(x, 0, y + stepy);
				county++;
				y += stepy;
				ty += stepty;
			}

			countx++;
			x += stepx;
			tx += steptx;
			county = 0;
			y = y0;
			ty = ty0;
		}

		glEnd();
	}

	void Enemy::updateAngles() {

		float _legMaxAngle = 45.0f, _legAngleUpdate = 10.0f;
		
		if (_physics.isDoubleJumping()) {

			_bodyAngle = 0.0f;

			_armAngle[0] = 100.0f;
			_armAngle[1] = -100.0f;
			_armRotationVector[0].set(0,1,0);
			_armRotationVector[1].set(0,1,0);

			_legAngle[0] = 100.0f;
			_legAngle[1] = -100.0f;
			_legRotationVector[0].set(0,1,0);
			_legRotationVector[1].set(0,1,0);

			_legDirection[0] = true;
			_legDirection[1] = false;
		}
		else if (_physics.isJumping()) {

			_bodyAngle = -45.0f;

			_armAngle[0] = -90.0f;
			_armAngle[1] = 100.0f;
			_armRotationVector[0].set(1,0,0);
			_armRotationVector[1].set(1,0,0);

			_legAngle[0] = 80.0f;
			_legAngle[1] = -80.0f;
			_legRotationVector[0].set(1,0,0);
			_legRotationVector[1].set(1,0,0);

			_legDirection[0] = true;
			_legDirection[1] = false;
		}
		else if (_isRunning) {

			_bodyAngle = -45.0f;

			_armAngle[0] = _armAngle[1] = -80.0f;
			_armRotationVector[0].set(1,0,0);
			_armRotationVector[1].set(1,0,0);

			if (_legDirection[0]) {
				_legAngle[0] += _legAngleUpdate;
			}
			else {
				_legAngle[0] -= _legAngleUpdate;
			}

			if (_legAngle[0] <= -_legMaxAngle) {
				_legDirection[0] = true;
			}
			else if (_legAngle[0] >= _legMaxAngle) {
				_legDirection[0] = false;
			}

			if (_legDirection[1]) {
				_legAngle[1] += _legAngleUpdate;
			}
			else {
				_legAngle[1] -= _legAngleUpdate;
			}

			if (_legAngle[1] <= -_legMaxAngle) {
				_legDirection[1] = true;
			}
			else if (_legAngle[1] >= _legMaxAngle) {
				_legDirection[1] = false;
			}

			_legRotationVector[0].set(1,0,0);
			_legRotationVector[1].set(1,0,0);
		}
		else {	// stop moving

			_bodyAngle = 0.0f;

			_armAngle[0] = _armAngle[1] = 0.0f;
			_armRotationVector[0].set(1,0,0);
			_armRotationVector[1].set(1,0,0);

			_legAngle[0] = _legAngle[1] = 0.0f;
			_legRotationVector[0].set(1,0,0);
			_legRotationVector[1].set(1,0,0);

			_legDirection[0] = true;
			_legDirection[1] = false;
		}
	}
}