#include "Player.h"

namespace proj {

	Player::Player(std::string id) : cg::Entity(id) {}
	Player::~Player() {}

	void Player::init() {

		_physics.setPosition(0,0.5,0);
		_physics.setLinearVelocity(25.0);
		_physics.setAngularVelocity(100.0);
		_physics.setAxesScale(3.0);

		_hatCenterWidth =  2.0f;
		_hatCenterLength = 2.0f;
		_hatCenterHeight = 1.5f;

		_hatMiddleWidth =  4.0f;
		_hatMiddleLength = 0.5f;
		_hatMiddleHeight = 0.6f;

		_headWidth =  6.0f;
		_headLength = 3.0f;
		_headHeight = 4.0f;

		_faceWidth =  _headWidth - 2.0f;
		_faceHeight = _headHeight / 2.0f;

		_eyeWidth = 0.4f;
		_eyeHeight = 1.0f;

		_bodyWidth =  3.0f;
		_bodyLength = 2.0f;
		_bodyHeight = 4.0f;

		_armWidth =  1.0f;
		_armLength = 1.0f;
		_armHeight = 2.0f;

		_legWidth =  1.0f;
		_legLength = 1.0f;
		_legHeight = 2.0f;

		_bodyAngle = 0.0f;
		_armAngle = 0.0f;
		_legAngle[0] = 0.0f;
		_legAngle[1] = 0.0f;

		_legDirection[0] = true;
		_legDirection[1] = false;

		_debugMode = false;
	}
	
	void Player::update(unsigned long elapsed_millis) {

		_isMoving = false;
		double elapsed_seconds = elapsed_millis / (double)1000;

		if(cg::KeyBuffer::instance()->isKeyDown('w')) {
			_isMoving = true;
			_physics.goAhead();
		}
		if(cg::KeyBuffer::instance()->isKeyDown('s')) {
			_isMoving = true;
			_physics.goBack();
		}
		if(cg::KeyBuffer::instance()->isKeyDown('a')) {
			_physics.yawLeft();
		}
		if(cg::KeyBuffer::instance()->isKeyDown('d')) {
			_physics.yawRight();
		}
		
		_physics.step(elapsed_seconds);
	}

	void Player::draw() {

		if(_debugMode) {
			_physics.drawAxes();
		}

		_physics.applyTransforms();
		updateAngles();
			
		glColor3f(0.4f,0.4f,0.4f);	// members color

		// left leg
		glPushMatrix();
		glTranslatef(-(_legWidth + _bodyWidth) / 5.0f, 0.0f, _legHeight);
		glRotatef(_legAngle[0], 1,0,0);
		glTranslatef(0.0f, 0.0f, -_legHeight / 2.0f);
		glScalef(_legWidth, _legLength, _legHeight);
		glutSolidCube(1.0);
		glPopMatrix();

		// right leg
		glPushMatrix();
		glTranslatef((_legWidth + _bodyWidth) / 5.0f, 0.0f, _legHeight);
		glRotatef(_legAngle[1], 1,0,0);
		glTranslatef(0.0f, 0.0f, -_legHeight / 2.0f);
		glScalef(_legWidth, _legLength, _legHeight);
		glutSolidCube(1.0);
		glPopMatrix();

		// left arm
		glPushMatrix();
		if (_armAngle < 0.0f) {
			glTranslatef(-(_armWidth + _bodyWidth) / 2.0f, 1.5f, _armHeight + _legHeight - 1.0f);
		}
		else {
			glTranslatef(-(_armWidth + _bodyWidth) / 2.0f, 0.0f, _armHeight + _legHeight);
		}
		glRotatef(_armAngle, 1,0,0);
		glTranslatef(0.0f, 0.0f, -_armHeight / 2.0f);
		glScalef(_armWidth, _armLength, _armHeight);
		glutSolidCube(1.0);
		glPopMatrix();

		// right arm
		glPushMatrix();
		if (_armAngle < 0.0f) {
			glTranslatef((_armWidth + _bodyWidth) / 2.0f, 1.5f, _armHeight + _legHeight - 1.0f);
		}
		else {
			glTranslatef((_armWidth + _bodyWidth) / 2.0f, 0.0f, _armHeight + _legHeight);
		}
		glRotatef(_armAngle, 1,0,0);
		glTranslatef(0.0f, 0.0f, -_armHeight / 2.0f);
		glScalef(_armWidth, _armLength, _armHeight);
		glutSolidCube(1.0);
		glPopMatrix();

		// body
		glPushMatrix();
		glColor3f(0.5f,0.5f,0.5f);
		glTranslatef(0.0f, 0.0f, _legHeight - 0.5f);
		glRotatef(_bodyAngle, 1.0f, 0.0f, 0.0f);
		glTranslatef(0.0f, 0.0f, _bodyHeight / 2.0f);
		glScalef(_bodyWidth, _bodyLength, _bodyHeight);
		glutSolidCube(1.0);
		glPopMatrix();

		if (_bodyAngle < 0.0f) {
			glTranslatef(0.0f, 2.5f, -0.75f);
		}

		// head
		glPushMatrix();
			glTranslatef(0.0f, 0.0f, _headHeight / 2.0f + _bodyHeight + _legHeight - 1.75f);
			// eyes
			glBegin(GL_POLYGON);
				glColor3f(0.0f,0.0f,0.0f);
				glVertex3f(-_eyeWidth / 2.0f + 1.0f, _headLength / 2.0f + 0.02f, -_eyeHeight / 2.0f + 0.2f);
				glVertex3f(_eyeWidth / 2.0f + 1.0f, _headLength / 2.0f + 0.02f, -_eyeHeight / 2.0f + 0.2f);
				glVertex3f(_eyeWidth / 2.0f + 1.0f, _headLength / 2.0f + 0.02f, _eyeHeight / 2.0f + 0.2f);
				glVertex3f(-_eyeWidth / 2.0f + 1.0f, _headLength / 2.0f + 0.02f, _eyeHeight / 2.0f + 0.2f);
			glEnd();
			glBegin(GL_POLYGON);
				glColor3f(0.0f,0.0f,0.0f);
				glVertex3f(-_eyeWidth / 2.0f - 1.0f, _headLength / 2.0f + 0.02f, -_eyeHeight / 2.0f + 0.2f);
				glVertex3f(_eyeWidth / 2.0f - 1.0f, _headLength / 2.0f + 0.02f, -_eyeHeight / 2.0f + 0.2f);
				glVertex3f(_eyeWidth / 2.0f - 1.0f, _headLength / 2.0f + 0.02f, _eyeHeight / 2.0f + 0.2f);
				glVertex3f(-_eyeWidth / 2.0f - 1.0f, _headLength / 2.0f + 0.02f, _eyeHeight / 2.0f + 0.2f);
			glEnd();
			// face
			glBegin(GL_POLYGON);
				glColor3f(0.8f,0.6f,0.5f);
				glVertex3f(-_faceWidth / 2.0f, _headLength / 2.0f + 0.01f, -_faceHeight / 2.0f + 0.5f);
				glVertex3f(_faceWidth / 2.0f, _headLength / 2.0f + 0.01f, -_faceHeight / 2.0f + 0.5f);
				glVertex3f(_faceWidth / 2.0f, _headLength / 2.0f + 0.01f, _faceHeight / 2.0f + 0.5f);
				glVertex3f(-_faceWidth / 2.0f, _headLength / 2.0f + 0.01f, _faceHeight / 2.0f + 0.5f);
			glEnd();
			glScalef(_headWidth, _headLength, _headHeight);
			glColor3f(0.6f,0.6f,0.6f);
			glutSolidCube(1.0);
		glPopMatrix();

		// hat
		glPushMatrix();
		glTranslatef(0.0f, 0.0f, _hatCenterHeight / 2.0f + _headHeight + _bodyHeight + _legHeight - 1.75f);
			glPushMatrix();
				glColor3f(0.4f,0.4f,0.4f);
				glScalef(_hatMiddleWidth, _hatMiddleLength, _hatMiddleHeight);
				glutSolidCube(1.0);
			glPopMatrix();
			glPushMatrix();
				glColor3f(0.5f,0.5f,0.5f);
				glScalef(_hatCenterWidth, _hatCenterLength, _hatCenterHeight);
				glutSolidCube(1.0);
			glPopMatrix();
		glPopMatrix();
	}

	cg::Vector3d Player::getPosition() {
		return _physics.getPosition();
	}

	void Player::updateAngles() {

		float _legMaxAngle = 45.0f, _legAngleUpdate = 10.0f;
		
		if (_isMoving) {

			_bodyAngle = -45.0f;
			_armAngle = -80.0f;

			if (_legDirection[0]) {
				_legAngle[0] += _legAngleUpdate;
			}
			else {
				_legAngle[0] -= _legAngleUpdate;
			}

			if (_legAngle[0] <= -_legMaxAngle) {
				_legDirection[0] = true;
			}
			else if (_legAngle[0] >= _legMaxAngle) {
				_legDirection[0] = false;
			}

			if (_legDirection[1]) {
				_legAngle[1] += _legAngleUpdate;
			}
			else {
				_legAngle[1] -= _legAngleUpdate;
			}

			if (_legAngle[1] <= -_legMaxAngle) {
				_legDirection[1] = true;
			}
			else if (_legAngle[1] >= _legMaxAngle) {
				_legDirection[1] = false;
			}
		}
		else {	// stop moving

			_bodyAngle = 0.0f;
			_armAngle = 0.0f;
			_legAngle[0] = 0.0f;
			_legAngle[1] = 0.0f;

			_legDirection[0] = true;
			_legDirection[1] = false;
		}
	}

	void Player::toggleDebugMode() {
		_debugMode = !_debugMode;
	}
}