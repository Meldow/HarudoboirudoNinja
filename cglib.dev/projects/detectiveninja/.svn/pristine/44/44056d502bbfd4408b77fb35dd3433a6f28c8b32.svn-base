#include "Scene.h"

namespace proj {

	Scene::Scene() : cg::Entity("Scene") {}
	Scene::~Scene() {}

	void Scene::init() {

		glCullFace(GL_FRONT);
		glEnable(GL_CULL_FACE);

		GLfloat lmodel_ambient[] = { 0.2f, 0.2f, 0.2f, 1.0f };
		glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);
		glLightModeli(GL_LIGHT_MODEL_LOCAL_VIEWER, GL_TRUE);
		glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, GL_FALSE);

		//_lvlm = dynamic_cast<LevelManager*>(cg::Registry::instance()->get("LevelManager"));
		_winHeight = cg::Manager::instance()->getApp()->getWindowInfo().height;
		_winWidth = cg::Manager::instance()->getApp()->getWindowInfo().width;
		_won = _lost = false;
		//float fog_color[] = {0.1f,0.1f,0.1f,1.0f};
		//glFogi(GL_FOG_MODE,GL_LINEAR);
		//glFogfv(GL_FOG_COLOR, fog_color);
		//glFogf(GL_FOG_START,15.0f);
		//glFogf(GL_FOG_END,25.0f);
	}

	bool Scene::getWon() {
		return _won;
	}

	bool Scene::getLost() {
		return _lost;
	}

	void Scene::draw() {
		glEnable(GL_LIGHTING);
		//glEnable(GL_FOG);
	}

	void Scene::drawOverlay() {
		glDisable(GL_LIGHTING);
		//glDisable(GL_FOG);

		glColor3d(0.9,0.1,0.1);

		LevelManager* _lvlm = dynamic_cast<LevelManager*>(cg::Registry::instance()->get("LevelManager"));
		std::ostringstream clueMessage;
		//clueMessage.clear();
		clueMessage << "Clues collected: " << _lvlm->getCurrentClues() << " out of " << _lvlm->getTotalClues();

		
		cg::Util::instance()->drawBitmapString(clueMessage.str(),10,10);

		if(_won) {

			glRasterPos2d( _winWidth/2,  _winHeight/2 );
			std::string s = "YOU WON!";
			std::string::iterator iend = s.end();
			for (std::string::iterator i = s.begin(); i != iend; i++) {
				glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, *i);
			}
		}

		if(_lost) {

			glRasterPos2d( _winWidth/2,  _winHeight/2 );
			std::string s = "YOU LOST!";
			std::string::iterator iend = s.end();
			for (std::string::iterator i = s.begin(); i != iend; i++) {
				glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, *i);
			}
		}
		
		
		glEnable(GL_LIGHTING);
	}

	void Scene::onReshape(int width, int height) {
		_winWidth = width;
		_winHeight = height;
	}

	void Scene::onLose() {
		_lost = true;
	}

	void Scene::onWin() {
		_won = true;
	}



}