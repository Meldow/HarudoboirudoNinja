#include "ObjectClue.h"

namespace proj {

	ObjectClue::ObjectClue(std::string id, cg::Vector3d position) : WorldObject(id, position)  {
		_clueSize = 5.0;
	}
	ObjectClue::ObjectClue(std::string id, cg::Vector3d position, double size) : WorldObject(id, position)  {
		_clueSize = size;
	}
	ObjectClue::~ObjectClue() {}

	void ObjectClue::init() {
		_wasCaught = false;
		registerToCollisionManager();
		dynamic_cast<DebugManager*>(cg::Registry::instance()->get("DebugManager"))->registerObject(dynamic_cast<Debug*>(this));
	}
	
	void ObjectClue::update(unsigned long elapsed_millis) {

		bool hadBeenCaught = _wasCaught;
		if (isColliding() && !_wasCaught) {
			_wasCaught = true;
		}
		if (_wasCaught && !hadBeenCaught) {
			LevelManager* lvlManager = dynamic_cast<LevelManager*>(cg::Registry::instance()->get("LevelManager"));
			lvlManager->onClueGet();
		}
	}

	void ObjectClue::draw() {

		if (!_wasCaught) {

			if (isDebug()) {

				float* color = getBoundingSphere(0)->getColor();
				glPushMatrix();

					glDisable(GL_LIGHTING);

					glColor3f(color[0], color[1], color[2]);
					glTranslatef(getBoundingSphere(0)->getPosition()[0], getBoundingSphere(0)->getPosition()[1], getBoundingSphere(0)->getPosition()[2]);
					glutWireSphere(getBoundingSphere(0)->getRadius(), 20, 20);

					glEnable(GL_LIGHTING);

				glPopMatrix();
			}

			TextureManager* tm = dynamic_cast<TextureManager*>( cg::Registry::instance()->get("TextureManager"));
			GLuint txCrate = tm->get("crate")->getTextureDL();

			glPushMatrix();
				glEnable(GL_TEXTURE_2D);
				glTranslatef(_position[0], _position[1], _position[2] + _clueSize / 2);
				glScalef(_clueSize, _clueSize, _clueSize);
				unitCube(txCrate);
				glDisable(GL_TEXTURE_2D);
			glPopMatrix();
		}
	}

	void ObjectClue::registerToCollisionManager() {

		createBoundingSpheres();

		CollisionManager *collisionManager = (CollisionManager*)cg::Registry::instance()->get("CollisionManager");
		collisionManager->registerClue(dynamic_cast<Collidable*>(cg::Registry::instance()->get(getId())));
	}

	void ObjectClue::createBoundingSpheres() {

		double radius = sqrt(_clueSize * _clueSize / 2);
		cg::Vector3d position(_position[0], _position[1], _position[2] + _clueSize / 2);

		BoundingSphere *b = new BoundingSphere(radius, position);
		addBoundingSphere(b);
	}

	void ObjectClue::updateBoundingSpheres() {}

	cg::Vector3d ObjectClue::getPosition() {
		return _position;
	}

	void ObjectClue::setHeight(int height) {}
}