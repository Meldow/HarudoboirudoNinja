#include "LevelManager.h"

namespace proj {

	LevelManager::LevelManager() : Entity("LevelManager") {}
	LevelManager::~LevelManager() {}
	
	void LevelManager::init() {
		_materialManager = dynamic_cast<MaterialManager*>(cg::Registry::instance()->get("MaterialManager"));
		_textureManager = dynamic_cast<TextureManager*>(cg::Registry::instance()->get("TextureManager"));
	
	}

	void LevelManager::addClue() {
		_currentClues++;
		
		//checks if level is over
		if(_currentClues == _currentLevel->getTotalClues()) {
			//TODO 
			//end level
		}
	}
	
	void LevelManager::loadLevel(Level* lvl) {
		_currentLevel = lvl;
		_currentClues = 0;

		_materialManager->clear();
		std::list<Material*>::iterator matit;
		for(matit = lvl->getMaterials()->begin(); matit != lvl->getMaterials()->end(); matit++) {
			_materialManager->add(*matit);
		}

		_textureManager->clear();
		std::list<Texture*>::iterator texit;
		for(texit = lvl->getTextures()->begin(); texit != lvl->getTextures()->end(); texit++) {
			_textureManager->add(*texit);
		}
	}

	void LevelManager::restartLevel() {
		_currentClues = 0;

		//reactivate all clues
	}

}