#include "MenuManager.h"

namespace proj {

	MenuManager::MenuManager() : Entity("MenuManager") {
		_menus = new std::list<Menu*>();
	}
	MenuManager::~MenuManager() {}
	
	void MenuManager::init() {
		Menu* main = new MainMenu();
		add(main);
		add(new LevelSelectMenu());
		add(new InGameMenu());

		_currentMenu = main;
		activateCurrentMenu();

		_pressTimerMillis = 0;
	}

	void MenuManager::add(Menu* m) {
		_menus->push_back(m);
		cg::Registry::instance()->add(m);
		cg::View *view = (cg::View*) cg::Registry::instance()->get("view1");
		view->linkEntityAtEnd(m->getTitle());
	}

	void MenuManager::clear() {
		_menus->clear();
	}

	
	Menu* MenuManager::get(std::string name) {
		Menu* menu = NULL;
		std::list<Menu*>::iterator it;

		for(it = _menus->begin(); it != _menus->end(); it++) {
			if(!(*it)->getTitle().compare(name))
				menu = *it;
		}
		return menu;
	}

	Menu* MenuManager::getCurrentMenu() {
		return _currentMenu;
	}

	void MenuManager::goToMenu(Menu* m) {
		deactivateCurrentMenu();
		_currentMenu = m;
		activateCurrentMenu();
	}
	void MenuManager::goToMenuByName(std::string menuName) {
		goToMenu(get(menuName));
	}

	void MenuManager::activateCurrentMenu() {
		_currentMenu->activate();
	}
	void MenuManager::deactivateCurrentMenu() {
		_currentMenu->deactivate();
	}

	void MenuManager::ingameMenu() {
		if(!_currentMenu->getTitle().compare("InGameMenu")) {
			if(_currentMenu->isActive()) {
				deactivateCurrentMenu();
				dynamic_cast<MainApp*>(cg::Manager::instance()->getApp())->unpause();
			}else {
				activateCurrentMenu();
				dynamic_cast<MainApp*>(cg::Manager::instance()->getApp())->pause();
			}
		} else {
			if(!_currentMenu->isActive()) {
				goToMenuByName("InGameMenu");
				dynamic_cast<MainApp*>(cg::Manager::instance()->getApp())->pause();
			}
		}
	}

	void MenuManager::update(unsigned long elapsed_millis) {
		if(_pressTimerMillis > 0) {
			_pressTimerMillis -= elapsed_millis;
			return;
		}
		if(!_currentMenu->isActive())
			return;

		if(cg::KeyBuffer::instance()->isKeyDown('0')) {	
			currentMenuKey('0');
		}
		if(cg::KeyBuffer::instance()->isKeyDown('1')) {
			currentMenuKey('1');
		}
		if(cg::KeyBuffer::instance()->isKeyDown('2')) {
			currentMenuKey('2');
		}
		if(cg::KeyBuffer::instance()->isKeyDown('3')) {
			currentMenuKey('3');
		}
		if(cg::KeyBuffer::instance()->isKeyDown('4')) {
			currentMenuKey('4');
		}
		if(cg::KeyBuffer::instance()->isKeyDown('5')) {
			currentMenuKey('5');
		}
		if(cg::KeyBuffer::instance()->isKeyDown('6')) {
			currentMenuKey('6');
		}
		if(cg::KeyBuffer::instance()->isKeyDown('7')) {
			currentMenuKey('7');
		}
		if(cg::KeyBuffer::instance()->isKeyDown('8')) {
			currentMenuKey('8');
		}
		if(cg::KeyBuffer::instance()->isKeyDown('9')) {
			currentMenuKey('9');
		}
	}

	void MenuManager::currentMenuKey(unsigned char key) {
		_pressTimerMillis = 500; 
		_currentMenu->onKeyReleased(key);
	}

}