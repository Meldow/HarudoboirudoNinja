#include "Enemy.h"

namespace proj {

	Enemy::Enemy(std::string id, cg::Vector3d position) : WorldObject(id, position) {}
	Enemy::~Enemy() {}

	void Enemy::init() {

		_physics.setPosition(_position[0], _position[1], _position[2]);
		_physics.setLinearVelocity(25.0);
		_physics.setAngularVelocity(100.0);
		_physics.setAxesScale(12.0);

		_previousPosition = _position;

		_isMoving = false;
		_spottedNinja = false;
		_spottedSexyMagazine = false;

		_headWidth =  3.0f;
		_headLength = 2.0f;
		_headHeight = 4.0f;

		_bodyWidth =  4.0f;
		_bodyLength = 2.5f;
		_bodyHeight = 4.0f;

		_armWidth =  1.0f;
		_armLength = 1.0f;
		_armHeight = 3.0f;

		_legWidth =  1.0f;
		_legLength = 1.0f;
		_legHeight = 3.0f;

		_headAngle = 0.0f;

		_armAngle[0] = 0.0f;
		_armAngle[1] = 0.0f;
		_armRotationVector[0].set(1,0,0);
		_armRotationVector[1].set(1,0,0);

		_armDirection[0] = false;
		_armDirection[1] = true;

		_legAngle[0] = 0.0f;
		_legAngle[1] = 0.0f;
		_legRotationVector[0].set(1,0,0);
		_legRotationVector[1].set(1,0,0);

		_legDirection[0] = true;
		_legDirection[1] = false;

		CollisionManager *collisionManager = (CollisionManager*)cg::Registry::instance()->get("CollisionManager");
		collisionManager->registerEnemy(dynamic_cast<Collidable*>(cg::Registry::instance()->get(getId())));
		createBoundingSpheres();
		makeAlertDL();

		dynamic_cast<DebugManager*>(cg::Registry::instance()->get("DebugManager"))->registerObject(dynamic_cast<Debug*>(this));
		_waypoints = new std::vector<BoxRed*>();

		_timer = 3.0f;
		_firstUpdate = true;
		_waypointChangeCounter = -1;
	}
	
	void Enemy::makeAlertDL() {

		_alertDL = glGenLists(1);
		assert(_alertDL != 0);
		glNewList(_alertDL, GL_COMPILE);
			glDisable(GL_LIGHTING);
			glColor3f(1.0, 0.0, 0.0);
			glTranslatef(0.0f, 0.0f, 12.0f);
			glutSolidCube(1);
			glTranslatef(0.0f, 0.0f, 3.0f);
			glScalef(1.0f, 1.0f, 2.5f);
			glutSolidCube(1);
			glEnable(GL_LIGHTING);
		glEndList();
	}

	void Enemy::update(unsigned long elapsed_millis) {

		double elapsed_seconds = elapsed_millis / (double)1000;
		_physics.step(elapsed_seconds);

		if (!_spottedSexyMagazine && !_spottedNinja) {
		
			//first update? set target
			//i dont actually need this since the target is defined by a integer
			if (_firstUpdate) {
				//std::cout<<"Setting first update target to \n";
				_firstUpdate = false;
				_targetWaypoint = 0;
				//show all positions
				int waypointindex;
				//for(waypointindex = 0; waypointindex < _waypoints->size(); waypointindex++) {
				//	//std::cout<<"Position of waypoipont number "<<waypointindex<<" is at "<<_waypoints->at(waypointindex)->getPosition()<<"\n";
				//}
			}

			//update target position
			_targetWaypointPosition = _waypoints->at(_targetWaypoint)->getPosition();

			//update distance to waypoint
			_squaredDistanceToWaypoint = squarelength(_physics.getPosition(), _targetWaypointPosition);
		
			//refresh my position
			_position = this->getPosition();

			//calculate vector pointing to *NEW* target
			_targetVector = _targetWaypointPosition - _position;

			//angle between front and my *NEW* target (working)
			_angle = acos((dotProduct(_physics.getFront(),_targetVector)) / (length(_physics.getFront())*length(_targetVector)));

			//turn to ninja
			//_angle = acos((dotProduct(_physics.getFront(),_ninja->getPosition())) / (length(_physics.getFront())*length(_ninja->getPosition())));

			//verification
			//std::cout << "angle is: "<<_angle<<"\n";

			if(_squaredDistanceToWaypoint < DISTANCE_TO_CHANGE_WAYPOINT) {
				_waypointChangeCounter++;
				_waypointChangeCounter = _waypointChangeCounter % 4;
				changeWaypoint();
				_isMoving = false;
				//std::cout << "_waypointChangeCounter: "<<_waypointChangeCounter<<"\n";
			}

			else { 
				if(_angle <= ANGLE_ERROR) {
					_physics.goAhead();
					_isMoving = true;
				}
				else {
					_physics.yawRight();
					_isMoving = false;
				}
			}
		}
		else {

			if (!_physics.isJumping()) {
				_timer += elapsed_seconds;
			}

			if (_timer > 0.2) {
				_physics.jump();
				_timer = 0.0;
			}
		}

		//COLLISION
		_previousPosition = getPosition();
		updateBoundingSpheres();
	}

	void Enemy::draw() {
		
		if (_isColliding) {

			_physics.setPosition(_previousPosition[0], _previousPosition[1], _previousPosition[2]);
			_physics.setMinHeight(_previousPosition[2]);
			_isColliding = false;

			updateBoundingSpheres();
		}

		if (isDebug()) {
			_physics.drawAxes();

			glDisable(GL_LIGHTING);

			for (int i = 0; i < getBoundingSpheres()->size(); i++) {

				float* color = getBoundingSphere(i)->getColor();

				glPushMatrix();
					glColor3f(color[0], color[1], color[2]);
					glTranslatef(getBoundingSphere(i)->getPosition()[0],
						getBoundingSphere(i)->getPosition()[1],
						getBoundingSphere(i)->getPosition()[2]);
					glutWireSphere(getBoundingSphere(i)->getRadius(), 20, 20);
				glPopMatrix();
			}

			glEnable(GL_LIGHTING);
		}

		updateAngles();

		glPushMatrix();

		// LOAD TEXTURES
		TextureManager* tm = dynamic_cast<TextureManager*>( cg::Registry::instance()->get("TextureManager"));
		GLuint txEnemyFace;
		if (_spottedSexyMagazine) {
			txEnemyFace = tm->get("tex_enemy_perv_face")->getTextureDL();
		}
		else {
			txEnemyFace = tm->get("tex_enemy_face")->getTextureDL();
		}
		GLuint txEnemyBody = tm->get("tex_dark_ninja_body")->getTextureDL();

		glEnable(GL_TEXTURE_2D);

		_physics.applyTransforms();
		
		// left leg
		glPushMatrix();
			glTranslatef(-(_legWidth + _bodyWidth) / 5.0f, 0.0f, _legHeight);
			glRotatef(_legAngle[0], _legRotationVector[0][0], _legRotationVector[0][1], _legRotationVector[0][2]);
			glTranslatef(0.0f, 0.0f, -_legHeight / 2.0f);
			glScalef(_legWidth, _legLength, _legHeight);
			unitCube(txEnemyBody);
		glPopMatrix();

		// right leg
		glPushMatrix();
			glTranslatef((_legWidth + _bodyWidth) / 5.0f, 0.0f, _legHeight);
			glRotatef(_legAngle[1], _legRotationVector[1][0], _legRotationVector[1][1], _legRotationVector[1][2]);
			glTranslatef(0.0f, 0.0f, -_legHeight / 2.0f);
			glScalef(_legWidth, _legLength, _legHeight);
			unitCube(txEnemyBody);
		glPopMatrix();

		// left arm
		glPushMatrix();
			if (_spottedNinja) {
				glTranslatef(-0.3f, 0.0f, _armHeight);
			}
			else if (_spottedSexyMagazine) {
				glTranslatef(0.5f, 0.0f, _armHeight - 0.5f);
			}
			glTranslatef(-_bodyWidth / 2.0f, 0.0f, _armHeight + _legHeight);
			glRotatef(_armAngle[0], _armRotationVector[0][0], _armRotationVector[0][1], _armRotationVector[0][2]);
			glTranslatef(-_armWidth / 2.0f, 0.0f, -_armHeight / 2.0f);
			glScalef(_armWidth, _armLength, _armHeight);
			unitCube(txEnemyBody);
		glPopMatrix();

		// right arm
		glPushMatrix();
			if (_spottedNinja) {
				glTranslatef(0.3f, 0.0f, _armHeight);
			}
			else if (_spottedSexyMagazine) {
				glTranslatef(-0.5f, 0.0f, _armHeight - 0.5f);
			}
			glTranslatef(_bodyWidth / 2.0f, 0.0f, _armHeight + _legHeight);
			glRotatef(_armAngle[1], _armRotationVector[1][0], _armRotationVector[1][1], _armRotationVector[1][2]);
			glTranslatef(_armWidth / 2.0f, 0.0f, -_armHeight / 2.0f);
			glScalef(_armWidth, _armLength, _armHeight);
			unitCube(txEnemyBody);
		glPopMatrix();

		// body
		glPushMatrix();
			glTranslatef(0.0f, 0.0f, _bodyHeight / 2.0f + _legHeight - 0.5f);
			glScalef(_bodyWidth, _bodyLength, _bodyHeight);
			unitCube(txEnemyBody);
		glPopMatrix();

		// head
		glPushMatrix();
			if (_spottedSexyMagazine) {
				glTranslatef(0.0f, 1.0f, 0.0f);
			}
			glTranslatef(0.0f, 0.0f, _headHeight / 2.0f + _bodyHeight + _legHeight - 1.75f);
			glRotatef(_headAngle, 1.0f, 0.0f, 0.0f);
			glScalef(_headWidth, _headLength, _headHeight);
			unitCube(txEnemyFace, txEnemyBody, txEnemyBody, txEnemyBody, txEnemyBody, txEnemyBody);
		glPopMatrix();

		if(_spottedNinja || _spottedSexyMagazine) {
			glCallList(_alertDL);
		}

		glDisable(GL_TEXTURE_2D);
		glPopMatrix();

		_spottedNinja = false;
	}

	void Enemy::registerToCollisionManager() {

		createBoundingSpheres();

		CollisionManager *collisionManager = (CollisionManager*)cg::Registry::instance()->get("CollisionManager");
		collisionManager->registerNinja(dynamic_cast<Collidable*>(cg::Registry::instance()->get(getId())));
	}

	void Enemy::createBoundingSpheres() {

		// main bounding sphere
		double r = (_headHeight + _bodyHeight + _legHeight) / 2 - 0.7f;
		cg::Vector3d p(getPosition()[0], getPosition()[1], getPosition()[2] + r);
		BoundingSphere *b = new BoundingSphere(r, p);

		addBoundingSphere(b);

		// vision bounding spheres
		double prevR = r;
		r = _headHeight / 2;

		cg::Vector3d prevP;
		p.set(getPosition()[0], getPosition()[1] + prevR + r, getPosition()[2] + _legHeight + _bodyHeight / 2);

		int maxNBoundingSpheres = 5;
		for (int i = 0; i <= maxNBoundingSpheres; i++) {
			
			b = new BoundingSphere(r, p);
			addBoundingSphere(b);

			prevR = r; r += 1.0f;
			prevP.set(p[0], p[1], p[2]); p.set(prevP[0], prevP[1] + prevR + r, prevP[2]); 
		}
	}

	void Enemy::updateBoundingSpheres() {

		// main bounding sphere
		double r = getBoundingSphere(0)->getRadius();
		cg::Vector3d p(getPosition()[0], getPosition()[1], getPosition()[2] + r);
		getBoundingSphere(0)->updatePosition(p); 

		// vision bounding spheres
		double prevR = r;
		r = getBoundingSphere(1)->getRadius();

		cg::Vector3d prevP;
		p.set(getPosition()[0], getPosition()[1] + prevR + r, getPosition()[2] + _legHeight + _bodyHeight / 2);

		for (int i = 1; i < getBoundingSpheres()->size(); i++) {
			
			getBoundingSphere(i)->updatePosition(p);

			if (i < getBoundingSpheres()->size() - 1) {
				prevR = r; r = getBoundingSphere(i + 1)->getRadius();
				prevP.set(p[0], p[1], p[2]); p.set(prevP[0], prevP[1] + prevR + r, prevP[2]);
			}
		}
	}

	cg::Vector3d Enemy::getPosition() {
		return _physics.getPosition();
	}

	cg::Vector3d Enemy::getFront() {
		return _physics.getFront();
	}

	void Enemy::setHeight(int height) {
		_physics.setPosition(getPosition()[0], getPosition()[1], height);
	}

	void Enemy::spottedNinja() {

		_isMoving = false;
		_spottedNinja = true;
	}

	void Enemy::spottedSexyMagazine() {

		_isMoving = false;
		_spottedSexyMagazine = true;
	}

	void Enemy::updateAngles() {

		float _armMaxAngle = 45.0f, _armAngleUpdate = 7.0f;
		float _legMaxAngle = 35.0f, _legAngleUpdate = 6.0f;
		
		if (_isMoving) {

			if (_armDirection[0]) {
				_armAngle[0] += _armAngleUpdate;
			}
			else {
				_armAngle[0] -= _armAngleUpdate;
			}

			if (_armAngle[0] <= -_armMaxAngle) {
				_armDirection[0] = true;
			}
			else if (_armAngle[0] >= _armMaxAngle) {
				_armDirection[0] = false;
			}

			if (_armDirection[1]) {
				_armAngle[1] += _armAngleUpdate;
			}
			else {
				_armAngle[1] -= _armAngleUpdate;
			}

			if (_armAngle[1] <= -_armMaxAngle) {
				_armDirection[1] = true;
			}
			else if (_armAngle[1] >= _armMaxAngle) {
				_armDirection[1] = false;
			}

			_armRotationVector[0].set(1,0,0);
			_armRotationVector[1].set(1,0,0);

			if (_legDirection[0]) {
				_legAngle[0] += _legAngleUpdate;
			}
			else {
				_legAngle[0] -= _legAngleUpdate;
			}

			if (_legAngle[0] <= -_legMaxAngle) {
				_legDirection[0] = true;
			}
			else if (_legAngle[0] >= _legMaxAngle) {
				_legDirection[0] = false;
			}

			if (_legDirection[1]) {
				_legAngle[1] += _legAngleUpdate;
			}
			else {
				_legAngle[1] -= _legAngleUpdate;
			}

			if (_legAngle[1] <= -_legMaxAngle) {
				_legDirection[1] = true;
			}
			else if (_legAngle[1] >= _legMaxAngle) {
				_legDirection[1] = false;
			}

			_legRotationVector[0].set(1,0,0);
			_legRotationVector[1].set(1,0,0);
		}
		else if (_spottedNinja) {

			_armAngle[0] = -20.0f;
			_armAngle[1] = 20.0f;
			_armRotationVector[0].set(0,1,0);
			_armRotationVector[1].set(0,1,0);
		}
		else if (_spottedSexyMagazine) {
			_headAngle = -15;

			_armAngle[0] = 10.0f;
			_armAngle[1] = -10.0f;
			_armRotationVector[0].set(0,1,0);
			_armRotationVector[1].set(0,1,0);

			if (_physics.isJumping()) {

				_legAngle[0] = 110.0f;
				_legAngle[1] = -110.0f;
				_legRotationVector[0].set(0,1,0);
				_legRotationVector[1].set(0,1,0);

				_legDirection[0] = true;
				_legDirection[1] = false;
			}
			else {

				_legAngle[0] = _legAngle[1] = 0.0f;
				_legRotationVector[0].set(1,0,0);
				_legRotationVector[1].set(1,0,0);
			}
		}
		else {	// stop moving

			_headAngle = 0.0f;

			_armAngle[0] = _armAngle[1] = 0.0f;
			_armRotationVector[0].set(1,0,0);
			_armRotationVector[1].set(1,0,0);

			_legAngle[0] = _legAngle[1] = 0.0f;
			_legRotationVector[0].set(1,0,0);
			_legRotationVector[1].set(1,0,0);

			_legDirection[0] = true;
			_legDirection[1] = false;
		}
	}

	void Enemy::addPath() {
	printf("addPath\n");
	}

	void Enemy::addPath(BoxRed* box){
		printf("addPath with waypoint\n");
		_waypoints->push_back(box);
	}

	double Enemy::dotProduct(cg::Vector3d v1, cg::Vector3d v2) {
		double result;
		result = (v1[0] * v2[0]) + (v1[1] * v2[1]) + (v1[2] * v2[2]);
		return result;
	}

	double Enemy::length(cg::Vector3d v1){
		double result = 0;
		for (int i=0; i<3; i++) {
			result += v1[i] * v1[i];
		}
		return sqrt(result);
	}

	double Enemy::squarelength(cg::Vector3d v1){
		double result = 0;
		for (int i=0; i<3; i++) {
			result += v1[i] * v1[i];
		}
		return result;
	}

	double Enemy::squarelength(cg::Vector3d v1, cg::Vector3d v2){
		double result = 0;
		for (int i=0; i<3; i++) {
			result += (v2[i] - v1[i]) * (v2[i] - v1[i]);
		}
		return result;
	}

	void Enemy::changeWaypoint() {
		switch (_waypointChangeCounter)
		{
		case 0:
			//std::cout << "case 0\n";
			_targetWaypoint += 1;
			_targetWaypoint = _targetWaypoint % NUMBER_WAYPOINTS;
			break;
		case 1:
			//std::cout << "case 1\n";
			_targetWaypoint += 2;
			_targetWaypoint = _targetWaypoint % NUMBER_WAYPOINTS;
			break;
		case 2:
			//std::cout << "case 2\n";
			_targetWaypoint -= 1;
			_targetWaypoint = _targetWaypoint % NUMBER_WAYPOINTS;
			break;
		case 3:
			//std::cout << "case 3\n";
			_targetWaypoint -= 2;
			_targetWaypoint = _targetWaypoint % NUMBER_WAYPOINTS;
			break;
		}
	}
}