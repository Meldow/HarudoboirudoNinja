#include "MainCamera.h"

namespace proj {

	MainCamera::MainCamera() : Entity("Camera") {}
    MainCamera::~MainCamera() {
		_target = 0;
	}
    void MainCamera::init() {

		cg::tWindowInfo win = cg::Manager::instance()->getApp()->getWindowInfo();
		_winWidth = win.width;
		_winHeight = win.height;

		_camHeight = 333;

		CAM_MOVE = 3;
		_x = 0;
		_y = 0;
		_z = 0;

		_target = dynamic_cast<ITargetable*>(cg::Registry::instance()->get("ninja"));	//(Player*) cg::Registry::instance()->get("ninja");
		_winSize.set(win.width,win.height);
		_orientation.setRotationDeg(0,cg::Vector3d::ny);
		_up.set(0,0,1);
		_front.set(0,-1,0);
		_right.set(1,0,0);
		_isRoll = false;
		_scale = 25.0f;
    }

	void MainCamera::onReshape(int width, int height) {
		_winSize.set(width,height);
	}

#if !defined(GLUT_WHEEL_UP)
# define GLUT_WHEEL_UP 3
# define GLUT_WHEEL_DOWN 4
#endif
	void MainCamera::onMouse(int button, int state, int x, int y) {
		_isRoll = (button == GLUT_RIGHT_BUTTON);
		_lastMousePosition.set(x,y);

		if (state == GLUT_UP) {
			if ( button == GLUT_WHEEL_DOWN ) {
				_scale += 2.5f;
			} else if( button == GLUT_WHEEL_UP ) {
				if(_scale > 2.5f)
					_scale -= 2.5f;
			}
		}
	}
	void MainCamera::onMouseMotion(int x, int y) {
		if(_isRoll) {
			double anglez = (_lastMousePosition[0] - x) / (double)5;
				_q.setRotationDeg(anglez,_front);
				_up = apply(_q,_up);
				_right = apply(_q,_right);
				_orientation = _q * _orientation;
		} else {
			double anglex = (_lastMousePosition[0] - x) / (double)5;
				_q.setRotationDeg(anglex,_up);
				_front = apply(_q,_front);
				_right = apply(_q,_right);
				_orientation = _q * _orientation;
			double angley = (y - _lastMousePosition[1]) / (double)5;
				_q.setRotationDeg(angley, _right);
				//_up = apply(_q,_up);
				_front = apply(_q,_front);
				_orientation = _q * _orientation;
		}
		_lastMousePosition.set(x,y);
	}
	void MainCamera::onMousePassiveMotion(int x, int y) {
	}

    void MainCamera::draw() {
		_position = _front * _scale;
		
		if(_position[2] < (_target->getPosition()[2] + 10.0))
			_position[2] = _target->getPosition()[2] + 10.0;
		
		
		if(cg::KeyBuffer::instance()->isSpecialKeyDown(GLUT_KEY_DOWN)) {
			_y -= CAM_MOVE;
		}
		if(cg::KeyBuffer::instance()->isSpecialKeyDown(GLUT_KEY_UP)) {
			_y += CAM_MOVE;
		}
		if(cg::KeyBuffer::instance()->isSpecialKeyDown(GLUT_KEY_LEFT)) {
			_x -= CAM_MOVE;
		}
		if(cg::KeyBuffer::instance()->isSpecialKeyDown(GLUT_KEY_RIGHT)) {
			_x += CAM_MOVE;
		}
		

        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
		gluPerspective(	60.0, _winWidth/_winHeight, 1.0, 10000.0);
 		//glu lookAt em proj, aqui
        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();
		
		//glTranslated(_position[0],_position[1],0);
		//_position = player->getPosition();

		gluLookAt(	_position[0] + _target->getPosition()[0], _position[1] + _target->getPosition()[1] ,_position[2],
					_target->getPosition()[0],_target->getPosition()[1],0,
					_up[0],_up[1],_up[2]);
    }

	
}
