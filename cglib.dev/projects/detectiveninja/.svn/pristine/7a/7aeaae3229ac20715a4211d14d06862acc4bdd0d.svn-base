#include "Player.h"

namespace proj {

	Player::Player(std::string id) : cg::Entity(id) {}
	Player::~Player() {}

	void Player::init() {
		
		_position.set(0.0, 0.0);
		_direction.set(1.0, 0.0);
		_velocity = 0.0;
		_angle = 0.0;
		_angularVelocity = 100.0;

		MOVE_SPEED = 5000.0;

		// body dimensions
		_hatCenterWidth =  2.5f;
		_hatCenterLength = 2.0f;
		_hatCenterHeight = 1.5f;

		_hatMiddleWidth =  5.0f;
		_hatMiddleLength = 0.5f;
		_hatMiddleHeight = 0.8f;

		_headWidth =  7.0f;
		_headLength = 3.0f;
		_headHeight = 4.0f;

		_faceWidth =  _headWidth - 2.0f;
		_faceHeight = _headHeight - 2.0f;

		_bodyWidth =  4.0f;
		_bodyLength = 2.0f;
		_bodyHeight = 3.0f;

		_armWidth =  1.0f;
		_armLength = 1.0f;
		_armHeight = 2.0f;

		_legWidth =  1.0f;
		_legLength = 1.0f;
		_legHeight = 2.0f;

		// start off with left leg
		_movingLeg[0] = true;
		_movingLeg[1] = false;
		_legAngle[0] = 0.0f;
		_legAngle[1] = 0.0f;
	}

	void Player::update(unsigned long elapsed_millis) {

		_isMoving = false;
		double elapsed_seconds = elapsed_millis / (double)1000; //tempo (time = Time.deltaTime), numero de segundos q passou do ultimo frame

		if(cg::KeyBuffer::instance()->isKeyDown('s')) {
			_velocity = -MOVE_SPEED * elapsed_seconds; //retirar -
			_isMoving = true;
		}

		if(cg::KeyBuffer::instance()->isKeyDown('w')) {
			_velocity = MOVE_SPEED * elapsed_seconds;
			_isMoving = true;
		}

		if(cg::KeyBuffer::instance()->isKeyDown('d')) {
			double delta = -_angularVelocity * elapsed_seconds;
			if(_velocity < 0 ) {
				delta *= -1;
			}
			_direction = rotateDeg(_direction, delta);
			_angle += delta;

			_velocity = MOVE_SPEED * elapsed_seconds;
			_isMoving = true;
		}

		if(cg::KeyBuffer::instance()->isKeyDown('a')) {
			double delta = _angularVelocity * elapsed_seconds;
			if(_velocity < 0 ) {
				delta *= -1;
			}
			_direction = rotateDeg(_direction, delta);
			_angle += delta;

			_velocity = -MOVE_SPEED * elapsed_seconds;
			_isMoving = true;
		}

		// update legs' angle
		if (_isMoving) {
			// left leg
			if (_movingLeg[0])
				_legAngle[0] -= 10.0f;
			else
				_legAngle[0] += 10.0f;

			if (_legAngle[0] <= -45.0f)
				_movingLeg[0] = false;

			else if (_legAngle[0] >= 45.0f)
				_movingLeg[0] = true;

			// right leg
			if (_movingLeg[1])
				_legAngle[1] -= 10.0f;
			else
				_legAngle[1] += 10.0f;

			if (_legAngle[1] <= -45.0f)
				_movingLeg[1] = false;

			else if (_legAngle[1] >= 45.0f)
				_movingLeg[1] = true;
		}
		else {	// reset
			_movingLeg[0] = true;
			_movingLeg[1] = false;
			_legAngle[0] = 0.0f;
			_legAngle[1] = 0.0f;
		}

		//pos
		_position += _direction * _velocity * elapsed_seconds;
		_velocity = 0;
	}

	void Player::draw() {

		// Y U NO NECCESSARY ??
		// glMatrixMode(GL_MODELVIEW);
		// glLoadIdentity();

		updatePosition();
		drawAxes();

		glTranslatef(0.0f, 0.0f, _legHeight / 2.0f);

		// left leg
		glPushMatrix();
			glColor3f(0.4f,0.4f,0.4f);
			glTranslatef(-(_legWidth + _bodyWidth) / 5.0f, 0.0f, _legHeight / 2);
			glRotatef(_legAngle[0], 1,0,0);
			glTranslatef(0.0f, 0.0f, -_legHeight / 2);
			glScalef(_legWidth, _legLength, _legHeight);
			glutSolidCube(1.0);
		glPopMatrix();

		// right leg
		glPushMatrix();
			glColor3f(0.4f,0.4f,0.4f);
			glTranslatef((_legWidth + _bodyWidth) / 5.0f, 0.0f, _legHeight / 2);
			glRotatef(_legAngle[1], 1,0,0);
			glTranslatef(0.0f, 0.0f, -_legHeight / 2);
			glScalef(_legWidth, _legLength, _legHeight);
			glutSolidCube(1.0);
		glPopMatrix();

		glTranslatef(0.0f, 0.0f, (_bodyHeight + _legHeight) / 2.0f);

		// hat
		glPushMatrix();
		glTranslatef(0.0f, 0.0f, (_hatCenterHeight + _headHeight + _bodyHeight) / 2.0f + _legHeight);
			glPushMatrix();
				glColor3f(0.4f,0.4f,0.4f);
				glScalef(_hatMiddleWidth, _hatMiddleLength, _hatMiddleHeight);
				glutSolidCube(1.0);
			glPopMatrix();
			glPushMatrix();
				glColor3f(0.5f,0.5f,0.5f);
				glScalef(_hatCenterWidth, _hatCenterLength, _hatCenterHeight);
				glutSolidCube(1.0);
			glPopMatrix();
		glPopMatrix();

		// head
		glPushMatrix();
			glTranslatef(0.0f, 0.0f, (_headHeight + _bodyHeight) / 2.0f);
			// face
			glBegin(GL_POLYGON);
				glColor3f(0.8f,0.6f,0.5f);
				glVertex3f(-_faceWidth / 2.0f, _headLength / 2.0f + 0.1f, -_faceHeight / 2.0f + 0.5f);
				glVertex3f(_faceWidth / 2.0f, _headLength / 2.0f + 0.1f, -_faceHeight / 2.0f + 0.5f);
				glVertex3f(_faceWidth / 2.0f, _headLength / 2.0f + 0.1f, _faceHeight / 2.0f + 0.5f);
				glVertex3f(-_faceWidth / 2.0f, _headLength / 2.0f + 0.1f, _faceHeight / 2.0f + 0.5f);
			glEnd();
			glScalef(_headWidth, _headLength, _headHeight);
			glColor3f(0.6f,0.6f,0.6f);
			glutSolidCube(1.0);
		glPopMatrix();

		// body
		glPushMatrix();
			glColor3f(0.5f,0.5f,0.5f);
			glScalef(_bodyWidth, _bodyLength, _bodyHeight);
			glutSolidCube(1.0);
		glPopMatrix();

		if (_isMoving > 0)	// player is moving
		{
			// left arm
			glPushMatrix();
				glColor3f(0.4f,0.4f,0.4f);
				glTranslatef(-(_armWidth + _bodyWidth) / 2.0f, 0.0f, _armHeight / 2);
				glRotatef(-75.0f, 1,0,0);
				glTranslatef(0.0f, 0.0f, -_armHeight / 2);
				glScalef(_armWidth, _armLength, _armHeight);
				glutSolidCube(1.0);
			glPopMatrix();

			// right arm
			glPushMatrix();
				glColor3f(0.4f,0.4f,0.4f);
				glTranslatef((_armWidth + _bodyWidth) / 2.0f, 0.0f, _armHeight / 2);
				glRotatef(-75.0f, 1,0,0);
				glTranslatef(0.0f, 0.0f, -_armHeight / 2);
				glScalef(_armWidth, _armLength, _armHeight);
				glutSolidCube(1.0);
			glPopMatrix();
		}
		else
		{
			// left arm
			glPushMatrix();
				glColor3f(0.4f,0.4f,0.4f);
				glTranslatef(-(_armWidth + _bodyWidth) / 2.0f, 0.0f, 0.0f);
				glScalef(_armWidth, _armLength, _armHeight);
				glutSolidCube(1.0);
			glPopMatrix();

			// right arm
			glPushMatrix();
				glColor3f(0.4f,0.4f,0.4f);
				glTranslatef((_armWidth + _bodyWidth) / 2.0f, 0.0f, 0.0f);
				glScalef(_armWidth, _armLength, _armHeight);
				glutSolidCube(1.0);
			glPopMatrix();
		}
	}

	cg::Vector2d Player::getPosition() {
		return _position.get();
	}

	void Player::updatePosition() {
		glTranslated(_position[0], _position[1], 0);
	}

	void Player::drawAxes() {

		glPushMatrix();
			glScaled(15,15,15);
			glColor3f(1.0f,0.0f,0.0f);
			glBegin(GL_LINES);
				glVertex3f(0.0f,0.0f,0.0f);
				glVertex3d(1,0,0);
			glEnd();
			glColor3f(0.0f,1.0f,0.0f);
			glBegin(GL_LINES);
				glVertex3d(0.0,0.0,0.0);
				glVertex3d(0,1,0);
			glEnd();
			glColor3f(0,0,1);
			glBegin(GL_LINES);
				glVertex3d(0.0,0.0,0.0);
				glVertex3d(0,0,1);
			glEnd();
		glPopMatrix();
	}
}