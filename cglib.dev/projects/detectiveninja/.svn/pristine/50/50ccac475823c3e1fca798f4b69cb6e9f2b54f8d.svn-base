#include "Ninja.h"

namespace proj {

	Ninja::Ninja(std::string id, cg::Vector3d position) : cg::Entity(id) {
		_physics.setPosition(position[0],position[1],position[2]);
	}
	Ninja::~Ninja() {}

	void Ninja::init() {

		_physics.setLinearVelocity(25.0);
		_physics.setAngularVelocity(100.0);
		_physics.setAxesScale(12.0);

		_isRunning = false;

		_hatCenterWidth =  2.0f;
		_hatCenterLength = 2.0f;
		_hatCenterHeight = 1.5f;

		_hatMiddleWidth =  4.0f;
		_hatMiddleLength = 0.5f;
		_hatMiddleHeight = 0.6f;

		_headWidth =  6.0f;
		_headLength = 3.0f;
		_headHeight = 4.0f;

		_bodyWidth =  3.0f;
		_bodyLength = 2.0f;
		_bodyHeight = 4.0f;

		_armWidth =  1.0f;
		_armLength = 1.0f;
		_armHeight = 2.0f;

		_legWidth =  1.0f;
		_legLength = 1.0f;
		_legHeight = 2.0f;

		_bodyAngle = 0.0f;

		_armAngle[0] = 0.0f;
		_armAngle[1] = 0.0f;
		_armRotationVector[0].set(1,0,0);
		_armRotationVector[1].set(1,0,0);

		_legAngle[0] = 0.0f;
		_legAngle[1] = 0.0f;
		_legRotationVector[0].set(1,0,0);
		_legRotationVector[1].set(1,0,0);

		_legDirection[0] = true;
		_legDirection[1] = false;

		_jumpKeyReleased = true;

		CollisionManager *collisionManager = (CollisionManager*)cg::Registry::instance()->get("CollisionManager");
		collisionManager->registerNinja(dynamic_cast<Collidable*>(cg::Registry::instance()->get(getId())));
		createBoundingSpheres();
	}
	
	void Ninja::update(unsigned long elapsed_millis) {

		double elapsed_seconds = elapsed_millis / (double)1000;
		_isRunning = false;

		if(cg::KeyBuffer::instance()->isKeyDown('w')) {
			_isRunning = true;

			if (!isColliding()) {
				_physics.goAhead();
			}
		}
		if(cg::KeyBuffer::instance()->isKeyDown('s')) {

			_isRunning = true;
			
			if (!isColliding()) {
				_physics.goBack();
			}
		}
		if(cg::KeyBuffer::instance()->isKeyDown('a')) {
			_physics.yawLeft();
		}
		if(cg::KeyBuffer::instance()->isKeyDown('d')) {
			_physics.yawRight();
		}
		if(cg::KeyBuffer::instance()->isKeyDown(32)) {

			if (!_physics.isJumping() && !_physics.isDoubleJumping() && _jumpKeyReleased) {
				_jumpKeyReleased = false;
				_physics.jump();
			}
			else if (_physics.isJumping() && !_physics.isDoubleJumping() && _jumpKeyReleased) {
				_jumpKeyReleased = false;
				_physics.doubleJump();
			}
		}
		if(cg::KeyBuffer::instance()->isKeyUp(32)) {
			_jumpKeyReleased = true;
		}

		_physics.step(elapsed_seconds);

		updateBoundingSpheres();
	}

	void Ninja::draw() {

		if (isDebug()) {
			_physics.drawAxes();

			glPushMatrix();

				glDisable(GL_LIGHTING);

				if (isColliding()) {
					glColor3f(1.0f, 0.0f, 0.0f);
				}
				
				glTranslatef(getBoundingSphere(0)->getPosition()[0], getBoundingSphere(0)->getPosition()[1], getBoundingSphere(0)->getPosition()[2]);
				glutWireSphere(getBoundingSphere(0)->getRadius(), 20, 20);

				glEnable(GL_LIGHTING);

			glPopMatrix();
		}

		updateAngles();

		glPushMatrix();
		TextureManager* tm = dynamic_cast<TextureManager*>( cg::Registry::instance()->get("TextureManager"));

		glEnable(GL_TEXTURE_2D);
		//printf("TEXTURE ID é : %d", tm->get("crate")->getTextureDL());
		GLuint txCrate = tm->get("crate")->getTextureDL();
		GLuint txNinjaFace = tm->get("ninja_face")->getTextureDL();

		
		_physics.applyTransforms();
		
		// left leg
		glPushMatrix();
			if (_physics.isJumping()) {
				glTranslatef(-(_legWidth + _bodyWidth) / 5.0f, 1.0f, _legHeight - 0.5f);
			}
			else {
				glTranslatef(-(_legWidth + _bodyWidth) / 5.0f, 0.0f, _legHeight);
			}
			glRotatef(_legAngle[0], _legRotationVector[0][0], _legRotationVector[0][1], _legRotationVector[0][2]);
			glTranslatef(0.0f, 0.0f, -_legHeight / 2.0f);
			glScalef(_legWidth, _legLength, _legHeight);
			unitCube(txCrate, txCrate, txCrate, txCrate, txCrate, txCrate);
		glPopMatrix();

		// right leg
		glPushMatrix();
			glTranslatef((_legWidth + _bodyWidth) / 5.0f, 0.0f, _legHeight);
			glRotatef(_legAngle[1], _legRotationVector[1][0], _legRotationVector[1][1], _legRotationVector[1][2]);
			glTranslatef(0.0f, 0.0f, -_legHeight / 2.0f);
			glScalef(_legWidth, _legLength, _legHeight);
			unitCube(txCrate, txCrate, txCrate, txCrate, txCrate, txCrate);
		glPopMatrix();

		// left arm
		glPushMatrix();
			if (_physics.isDoubleJumping()) {
				glTranslatef(-_bodyWidth / 2.0f, 0.0f, _armHeight + _legHeight - 0.5);
			}
			else if (_physics.isJumping()) {
				glTranslatef(-_bodyWidth / 2.0f, 1.0f, _armHeight + _legHeight - 1.0f);
			}
			else if (_isRunning) {
				glTranslatef(-_bodyWidth / 2.0f, 1.5f, _armHeight + _legHeight - 1.0f);
			}
			else {
				glTranslatef(-_bodyWidth / 2.0f, 0.0f, _armHeight + _legHeight);
			}
			glRotatef(_armAngle[0], _armRotationVector[0][0], _armRotationVector[0][1], _armRotationVector[0][2]);
			glTranslatef(-_armWidth / 2.0f, 0.0f, -_armHeight / 2.0f);
			glScalef(_armWidth, _armLength, _armHeight);
			unitCube(txCrate, txCrate, txCrate, txCrate, txCrate, txCrate);
		glPopMatrix();

		// right arm
		glPushMatrix();
			if (_physics.isDoubleJumping()) {
				glTranslatef(_bodyWidth / 2.0f, 0.0f, _armHeight + _legHeight - 0.5);
			}
			else if (_physics.isJumping()) {
				glTranslatef(_bodyWidth / 2.0f, 2.0f, _armHeight + _legHeight - 1.0f);
			}
			else if (_isRunning) {
				glTranslatef(_bodyWidth / 2.0f, 1.5f, _armHeight + _legHeight - 1.0f);
			}
			else {
				glTranslatef(_bodyWidth / 2.0f, 0.0f, _armHeight + _legHeight);
			}
			glRotatef(_armAngle[1], _armRotationVector[1][0], _armRotationVector[1][1], _armRotationVector[1][2]);
			glTranslatef(_armWidth / 2.0f, 0.0f, -_armHeight / 2.0f);
			glScalef(_armWidth, _armLength, _armHeight);
			unitCube(txCrate, txCrate, txCrate, txCrate, txCrate, txCrate);
		glPopMatrix();

		// body
		glPushMatrix();
			glTranslatef(0.0f, 0.0f, _legHeight - 0.5f);
			glRotatef(_bodyAngle, 1.0f, 0.0f, 0.0f);
			glTranslatef(0.0f, 0.0f, _bodyHeight / 2.0f);
			glScalef(_bodyWidth, _bodyLength, _bodyHeight);
			unitCube(txCrate, txCrate, txCrate, txCrate, txCrate, txCrate);
		glPopMatrix();

		if (_bodyAngle < 0.0f) {
			glTranslatef(0.0f, 2.5f, -0.75f);
		}

		// head
		glPushMatrix();
			glTranslatef(0.0f, 0.0f, _headHeight / 2.0f + _bodyHeight + _legHeight - 1.75f);
			glScalef(_headWidth, _headLength, _headHeight);
			unitCube(txNinjaFace, txCrate, txCrate, txCrate, txCrate, txCrate);
		glPopMatrix();

		// hat
		glPushMatrix();
		glTranslatef(0.0f, 0.0f, _hatCenterHeight / 2.0f + _headHeight + _bodyHeight + _legHeight - 1.75f);
			glPushMatrix();
				glScalef(_hatMiddleWidth, _hatMiddleLength, _hatMiddleHeight);
				unitCube(txCrate, txCrate, txCrate, txCrate, txCrate, txCrate);
			glPopMatrix();
			glPushMatrix();
				glScalef(_hatCenterWidth, _hatCenterLength, _hatCenterHeight);
				unitCube(txCrate, txCrate, txCrate, txCrate, txCrate, txCrate);
			glPopMatrix();
		glPopMatrix();

		glDisable(GL_TEXTURE_2D);
		glPopMatrix();
	}

	void Ninja::createBoundingSpheres() {

		double radius = (_headHeight + _bodyHeight + _legHeight) / 2;
		cg::Vector3d position(getPosition()[0], getPosition()[1], getPosition()[2] + radius);

		BoundingSphere *mainBoundingSphere = new BoundingSphere(radius, position);
		addBoundingSphere(mainBoundingSphere);
	}

	void Ninja::updateBoundingSpheres() {

		getBoundingSphere(0)->updatePosition(
			cg::Vector3d(getPosition()[0], getPosition()[1], getPosition()[2] + getBoundingSphere(0)->getRadius())); 
	}

	void Ninja::setHeight(int height) {
		_physics.setPosition(getPosition()[0], getPosition()[1], height);
	}

	cg::Vector3d Ninja::getPosition() {
		return _physics.getPosition();
	}

	void Ninja::toggleDebug() {
		switchDebug();
	}

	void Ninja::unitCube(GLuint txFront, GLuint txBack, GLuint txTop, GLuint txBottom, GLuint txRight, GLuint txLeft) {
		glScalef(0.5f,0.5f,0.5f);
		cube(5, -1,-1,1,1, 0,1,0, 0,0,1,1, txFront, txBack, txTop, txBottom, txRight, txLeft);
	}

	void Ninja::cube(int n, 
		double x0, double y0, double x1, double y1,
		double nx, double ny, double nz,
		double tx0, double ty0, double tx1, double ty1,
		GLuint txFront, GLuint txBack, GLuint txTop, GLuint txBottom, GLuint txRight, GLuint txLeft) {

		// front
		glPushMatrix();
			glBindTexture(GL_TEXTURE_2D, txFront);
			glTranslatef(0,1,0);
			dividedPlane(n, x0,y0,x1,y1, nx,ny,nz, tx0,ty0,tx1,ty1);
		glPopMatrix();
		// back
		glPushMatrix();
			glBindTexture(GL_TEXTURE_2D, txBack);
			glTranslatef(0,-1,0);
			glRotatef(180, 1,0,0);
			dividedPlane(n, x0,y0,x1,y1, nx,ny,nz, tx0,ty0,tx1,ty1);
		glPopMatrix();
		// top
		glPushMatrix();
			glBindTexture(GL_TEXTURE_2D, txTop);
			glTranslatef(0,0,1);
			glRotatef(90,1,0,0);
			dividedPlane(n, x0,y0,x1,y1, nx,ny,nz, tx0,ty0,tx1,ty1);
		glPopMatrix();
		// bottom
		glPushMatrix();
			glBindTexture(GL_TEXTURE_2D, txBottom);
			glTranslatef(0,0,-1);
			glRotatef(-90,1,0,0);
			dividedPlane(n, x0,y0,x1,y1, nx,ny,nz, tx0,ty0,tx1,ty1);
		glPopMatrix();
		// right
		glPushMatrix();
			glBindTexture(GL_TEXTURE_2D, txRight);
			glTranslatef(1,0,0);
			glRotatef(-90,0,0,1);
			dividedPlane(n, x0,y0,x1,y1, nx,ny,nz, tx0,ty0,tx1,ty1);
		glPopMatrix();
		// left
		glPushMatrix();
			glBindTexture(GL_TEXTURE_2D, txLeft);
			glTranslatef(-1,0,0);
			glRotatef(90,0,0,1);
			dividedPlane(n, x0,y0,x1,y1, nx,ny,nz, tx0,ty0,tx1,ty1);
		glPopMatrix();
	}

	void Ninja::dividedPlane(int n, 
		double x0, double y0, double x1, double y1,
		double nx, double ny, double nz,
		double tx0, double ty0, double tx1, double ty1) 
	{
		int countx = 0;
		int county = 0;
		double x = x0;
		double y = y0;
		double stepx = (x1 - x0) / (double) n;
		double stepy = (y1 - y0) / (double) n;
		double tx = tx0;
		double ty = ty0;
		double steptx = (tx1 - tx0) / (double) n;
		double stepty = (ty1 - ty0) / (double) n;

		glBegin(GL_QUADS);
		glNormal3d(nx, ny, nz);

		while (countx != n) {

			while (county != n) {

				glTexCoord2d(tx, ty);
				glVertex3d(x, 0, y);
				glTexCoord2d(tx + steptx, ty);
				glVertex3d(x + stepx, 0, y);
				glTexCoord2d(tx + steptx, ty + stepty);
				glVertex3d(x + stepx, 0, y + stepy);
				glTexCoord2d(tx, ty + stepty);
				glVertex3d(x, 0, y + stepy);
				county++;
				y += stepy;
				ty += stepty;
			}

			countx++;
			x += stepx;
			tx += steptx;
			county = 0;
			y = y0;
			ty = ty0;
		}

		glEnd();
	}

	void Ninja::updateAngles() {

		float _legMaxAngle = 45.0f, _legAngleUpdate = 10.0f;
		
		if (_physics.isDoubleJumping()) {

			_bodyAngle = 0.0f;

			_armAngle[0] = 100.0f;
			_armAngle[1] = -100.0f;
			_armRotationVector[0].set(0,1,0);
			_armRotationVector[1].set(0,1,0);

			_legAngle[0] = 100.0f;
			_legAngle[1] = -100.0f;
			_legRotationVector[0].set(0,1,0);
			_legRotationVector[1].set(0,1,0);

			_legDirection[0] = true;
			_legDirection[1] = false;
		}
		else if (_physics.isJumping()) {

			_bodyAngle = -45.0f;

			_armAngle[0] = -90.0f;
			_armAngle[1] = 100.0f;
			_armRotationVector[0].set(1,0,0);
			_armRotationVector[1].set(1,0,0);

			_legAngle[0] = 80.0f;
			_legAngle[1] = -80.0f;
			_legRotationVector[0].set(1,0,0);
			_legRotationVector[1].set(1,0,0);

			_legDirection[0] = true;
			_legDirection[1] = false;
		}
		else if (_isRunning) {

			_bodyAngle = -45.0f;

			_armAngle[0] = _armAngle[1] = -80.0f;
			_armRotationVector[0].set(1,0,0);
			_armRotationVector[1].set(1,0,0);

			if (_legDirection[0]) {
				_legAngle[0] += _legAngleUpdate;
			}
			else {
				_legAngle[0] -= _legAngleUpdate;
			}

			if (_legAngle[0] <= -_legMaxAngle) {
				_legDirection[0] = true;
			}
			else if (_legAngle[0] >= _legMaxAngle) {
				_legDirection[0] = false;
			}

			if (_legDirection[1]) {
				_legAngle[1] += _legAngleUpdate;
			}
			else {
				_legAngle[1] -= _legAngleUpdate;
			}

			if (_legAngle[1] <= -_legMaxAngle) {
				_legDirection[1] = true;
			}
			else if (_legAngle[1] >= _legMaxAngle) {
				_legDirection[1] = false;
			}

			_legRotationVector[0].set(1,0,0);
			_legRotationVector[1].set(1,0,0);
		}
		else {	// stop moving

			_bodyAngle = 0.0f;

			_armAngle[0] = _armAngle[1] = 0.0f;
			_armRotationVector[0].set(1,0,0);
			_armRotationVector[1].set(1,0,0);

			_legAngle[0] = _legAngle[1] = 0.0f;
			_legRotationVector[0].set(1,0,0);
			_legRotationVector[1].set(1,0,0);

			_legDirection[0] = true;
			_legDirection[1] = false;
		}
	}
}