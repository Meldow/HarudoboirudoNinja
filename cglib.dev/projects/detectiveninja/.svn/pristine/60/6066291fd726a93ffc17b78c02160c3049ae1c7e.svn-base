#include "ImageLoaderHeightMap.h"

namespace proj {
	
	ImageLoaderHeightMap::ImageLoaderHeightMap(std::string id) : cg::Entity(id) {}
	
	ImageLoaderHeightMap::ImageLoaderHeightMap(std::string id, std::string mapFile) : cg::Entity(id) {
		_mapFile = mapFile;
	}

	ImageLoaderHeightMap::~ImageLoaderHeightMap() {}

	void ImageLoaderHeightMap::init() {
		printf("-------- Height Map --------\n");
		printf("LOADING HEIGHTMAP...\n");
		scaleValue = 1.0f;							
		_rotate = 0.0f;
		glShadeModel(GL_SMOOTH);
		glClearColor(0.0f, 0.0f, 0.0f, 0.5f);
		glClearDepth(1.0f);
		glEnable(GL_DEPTH_TEST);
		glDepthFunc(GL_LEQUAL);
		glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);
 
		LoadRawFile(_mapFile, MAP_SIZE * MAP_SIZE, g_HeightMap); 
		printf("HEIGHTMAP LOADED.\n");
		dynamic_cast<DebugManager*>(cg::Registry::instance()->get("DebugManager"))->registerObject(dynamic_cast<Debug*>(this));
	}

	void ImageLoaderHeightMap::update(unsigned long elapsed_millis) {
		double elapsed_seconds = elapsed_millis / (double)1000;
		//_position[0] += elapsed_seconds*100;
		//printf("pos: %d\n", _position[0]);
		//_rotate += elapsed_seconds*10;
		//printf("rotate: %d\n", _rotate);

	}

	void ImageLoaderHeightMap::draw()
	{
		glPushMatrix();
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

			MaterialManager* mm = dynamic_cast<MaterialManager*>(cg::Registry::instance()->get("MaterialManager"));
			mm->get("obsidian")->apply();
			RenderHeightMap(g_HeightMap);
		glPopMatrix();

		if(isDebug())
		{
			drawAxes();
		}
		
	}


	void ImageLoaderHeightMap::LoadRawFile(std::string strName, int nSize, BYTE *pHeightMap)
	{
		FILE *pFile = NULL;

		// Open The File In Read / Binary Mode.
		pFile = fopen( strName.c_str(), "rb" );

		// Check To See If We Found The File And Could Open It
		if ( pFile == NULL )	
		{
			// Display Error Message And Stop The Function
			//printf(NULL, "Can't Find The Height Map!", "Error", MB_OK);
			printf("Can't Find The Height Map!\n");
			return;
		}

		fread( pHeightMap, 1, nSize, pFile );

		// After We Read The Data, It's A Good Idea To Check If Everything Read Fine
		int result = ferror( pFile );

		// Check If We Received An Error
		if (result)
		{
			//printf(NULL, "Failed To Get Data!", "Error", MB_OK);
			printf("Failed To Get Data!\n");
		}

		// Close The File.
		fclose(pFile);
		printf("HeightMapLoader: Height data collected sucessfully.\n");
	}

	//alturas
	int ImageLoaderHeightMap::Height(BYTE *pHeightMap, int X, int Y)				// This Returns The Height From A Height Map Index
	{
		int x = X % MAP_SIZE;								// Error Check Our x Value
		int y = Y % MAP_SIZE;								// Error Check Our y Value

		if(!pHeightMap) return 0;							// Make Sure Our Data Is Valid
		
		//retorna a altura do ponto X,Y
		return pHeightMap[x + (y * MAP_SIZE)];				// Index Into Our Height Array And Return The Height
	}

	int ImageLoaderHeightMap::Height(int X, int Y)
	{
		return Height(g_HeightMap, X, Y);
	}

	//cor segundo alturas, higher = brighter
	void ImageLoaderHeightMap::SetVertexColor(BYTE *pHeightMap, int x, int y)		// Sets The Color Value For A Particular Index, Depending On The Height Index
	{
		if(!pHeightMap) return;								// Make Sure Our Height Data Is Valid
		
		//-0.15 + altura / 256 ; pinta com tonalidades diferentes
		float fColor = -0.15f + (Height(pHeightMap, x, y ) / 256.0f);
		
		// Assign This Blue Shade To The Current Vertex
		glColor3f(0, 0, fColor );
	}

	void ImageLoaderHeightMap::RenderHeightMap(BYTE pHeightMap[])					// This Renders The Height Map As Quads
	{
		int X = 0, Y = 0;						// Create some variables to walk the array with.
		int x, y, z;							// Create some variables for readability
		float fColor = 0.0f;					// Create a variable to hold our color of the polygon
		
		//to create my normals
		cg::Vector3d firstvec, secondvec, normalvec;

		if(!pHeightMap) return;					// Make sure our height data is valid

		if(!isDebug()) 				
		{
			// Render the triangles in fill mode		
			glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);	
		}
		else 
		{
			// Render the triangles in wire frame mode
			glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);	
		}

		
		 //Next we actually need to draw the terrain from the height map.
		 //To do that, we just walk the array of height data and pluck out
		 //some heights to plot our points.  If we could see this happening,
		 //it would draw the columns first (Y), then draw the rows.
		 //Notice that we have a STEP_SIZE.  This determines how defined our
		 //height map is.  The higher the STEP_SIZE, the more blocky the terrain
		 //looks, while the lower it gets, the more rounded it becomes.
		 //If we set STEP_SIZE = 1 it would create a vertex for every pixel in the height map.
		 //I chose 16 as a decent size.  Anything too much less gets to be insane and slow.
		 //Of course, you can increase the number when you get lighting in.
		 //Then vertex lighting would cover up the blocky shape.  Instead of lighting,
		 //we just put a color value associated with every poly to simplify the tutorial.
		 //The higher the polygon, the brighter the color is.
		
		glBegin( GL_QUADS );					// Render Quads
		
		for ( X = 0; X < MAP_SIZE; X += STEP_SIZE )
			for ( Y = 0; Y < MAP_SIZE; Y += STEP_SIZE )
			{
				//glBegin( GL_QUADS );
				//calculates face normal
				firstvec = makeVec(	X,	Y,				Height(pHeightMap, X + STEP_SIZE, Y),
									X,	Y + STEP_SIZE,	Height(pHeightMap, X, Y + STEP_SIZE)
									);
				
				secondvec = makeVec(X,				Y,	Height(pHeightMap, X, Y ), 
									X + STEP_SIZE,	Y,	Height(pHeightMap, X + STEP_SIZE, Y)
									);

				//calculates crossproduct
				normalvec.set(crossProduct(firstvec,secondvec));
				normalvec = normalvec *(-1);
				cg::Vector3d aux = sqrt(pow(normalvec[0],2) + pow(normalvec[1],2) + pow(normalvec[2], 2));
				normalvec = normalvec/aux;
				// Get the (X, Y, Z) value for the bottom left vertex		
				x = X;							
				y = Y;	
				z = Height(pHeightMap, X, Y );							

				// Set the color value of the current vertice
				SetVertexColor(pHeightMap, x, y);
				
				//sets normal
				glNormal3d(normalvec[0],normalvec[1],normalvec[2]);
				
				glVertex3i(x, y, z);			// Send this vertex to OpenGL to be rendered (integer points are faster)

				// Get the (X, Y, Z) value for the top left vertex		
				x = X;										
				y = Y + STEP_SIZE;  
				z = Height(pHeightMap, X, Y + STEP_SIZE );							
			
				// Set the color value of the current vertex
				SetVertexColor(pHeightMap, x, y);

				//sets normal
				//glNormal3d(normalvec[0],normalvec[1],normalvec[2]);
				glVertex3i(x, y, z);			// Send this vertex to OpenGL to be rendered

				// Get the (X, Y, Z) value for the top right vertex		
				x = X + STEP_SIZE; 
				y = Y + STEP_SIZE; 
				z = Height(pHeightMap, X + STEP_SIZE, Y + STEP_SIZE ) ;

				// Set the color value of the current vertex
				SetVertexColor(pHeightMap, x, y);
				
				//sets normal
				//glNormal3d(normalvec[0],normalvec[1],normalvec[2]);
				glVertex3i(x, y, z);			// Send this vertex to OpenGL to be rendered

				// Get the (X, Y, Z) value for the bottom right vertex		
				x = X + STEP_SIZE; 
				y = Y; 
				z = Height(pHeightMap, X + STEP_SIZE, Y );

				// Set the color value of the current vertice
				SetVertexColor(pHeightMap, x, y);

				//sets normal
				//glNormal3d(normalvec[0],normalvec[1],normalvec[2]);
				glVertex3i(x, y, z);			// Send this vertex to OpenGL to be rendered
				//glEnd();
				//glBegin(GL_LINES);
				//	glVertex3f(x, y, z); // origin of the line
				//	glVertex3f(x+normalvec[0], y+normalvec[1], z+normalvec[2]); // ending point of the line
				//glEnd( );
			}
			
		glEnd();


		// Reset the color
		glColor4f(1.0f, 1.0f, 1.0f, 1.0f);

		glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	}
	
	void ImageLoaderHeightMap::drawAxes() {
		glPushMatrix();
			glScaled(1100,1100,1100);
			glColor3f(1.0f,0.0f,0.0f);
			glBegin(GL_LINES);
				glVertex3f(0.0f,0.0f,0.0f);
				glVertex3d(1,0,0);
			glEnd();
			glColor3f(0.0f,1.0f,0.0f);
			glBegin(GL_LINES);
				glVertex3d(0.0,0.0,0.0);
				glVertex3d(0,1,0);
			glEnd();
			glColor3f(0,0,1);
			glBegin(GL_LINES);
				glVertex3d(0.0,0.0,0.0);
				glVertex3d(0,0,1);
			glEnd();
		glPopMatrix();
	}

	//TODO
	void ImageLoaderHeightMap::drawNormalVertex(int x, int z, cg::Vector3d _up) {
		glPushMatrix();
			glColor3f(1.0f,1.0f,1.0f);
			
		glPopMatrix();
	}


	cg::Vector3d ImageLoaderHeightMap::crossProduct(cg::Vector3d v1, cg::Vector3d v2) {	
		cg::Vector3d returnValue;
		returnValue.set(	v1[1] * v2[2] - v1[2] * v2[1],
							v1[2] * v2[0] - v1[0] * v2[2],
							v1[0] * v2[1] - v1[1] * v2[0]);
		return returnValue;
	}

	cg::Vector3d ImageLoaderHeightMap::makeVec(double x1, double y1, double z1, double x2, double y2, double z2) {
		return cg::Vector3d(x2-x1,y2-y1,z2-z1);
	}

}


