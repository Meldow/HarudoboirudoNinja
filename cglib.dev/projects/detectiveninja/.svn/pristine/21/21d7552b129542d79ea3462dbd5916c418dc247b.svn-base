#include "CollisionManager.h"

namespace proj {

	CollisionManager::CollisionManager() : cg::Entity("CollisionManager") {}
	CollisionManager::~CollisionManager() {}

	void CollisionManager::init() {

		_enemies = new std::vector<Collidable*>();
		_staticObjects = new std::vector<Collidable*>();

		_map = (ImageLoaderHeightMap*)cg::Registry::instance()->get("mappedterrain");
	}

	void CollisionManager::update(unsigned long elapsed_millis) {

		heightMapCollisionDetection(_ninja);

		for (int staticObjectIdx = 0; staticObjectIdx < _staticObjects->size(); staticObjectIdx++) {
			staticObjectCollisionDetection(_ninja, _staticObjects->at(staticObjectIdx));
		}

		for (int enemyIdx = 0; enemyIdx < _enemies->size(); enemyIdx++) {
			enemyCollisionDetection(_ninja, _enemies->at(enemyIdx));
		}
	}

	void CollisionManager::registerNinja(Collidable* ninja) {
		_ninja = ninja;
	}
	void CollisionManager::registerEnemy(Collidable* enemy) {
		_enemies->push_back(enemy);
	}
	void CollisionManager::registerStaticObject(Collidable* staticObject) {
		_staticObjects->push_back(staticObject);
	}

	void CollisionManager::heightMapCollisionDetection(Collidable* dynamicObject) {

		cg::Vector3d pos = dynamicObject->getPosition();
		int height = _map->Height(dynamicObject->getPosition()[0], dynamicObject->getPosition()[1]);

		/*float orientationAngle;
		float boundingSphereRadius = dynamicObject->getBoundingSphere(0)->getRadius(); 

		float xAhead = pos[0] + boundingSphereRadius * cos(orientationAngle);
		float yAhead = pos[1] + boundingSphereRadius * cos(orientationAngle);

		int heightAhead = _map->Height(xAhead, yAhead);*/

		if ((height - pos[2]) > 4) {

			_ninja->isColliding(true);
			_ninja->getBoundingSphere(0)->isColliding(true);
		}
		else if (!_ninja->isColliding()) {

			int roundPosX = (int) pos[0];
			int roundPosY = (int) pos[1];

			float fracPosX = pos[0] - roundPosX;
			float fracPosY = pos[1] - roundPosY;

			float avgHeight = _map->Height(roundPosX, roundPosY) * (1.0f - fracPosX) * (1.0f - fracPosY)
								+ _map->Height(roundPosX + 1, roundPosY) * fracPosX * (1.0f - fracPosY)
								+ _map->Height(roundPosX, roundPosY + 1) * (1.0f - fracPosX) * fracPosY
								+ _map->Height(roundPosX + 1, roundPosY + 1) * fracPosX * fracPosY;

			dynamicObject->setHeight(avgHeight);
		}
	}

	bool CollisionManager::enemyCollisionDetection(Collidable* ninja, Collidable* enemy) {

		bool isColliding = false;
		BoundingSphere* ninjaBoundingSphere = ninja->getBoundingSphere(0);		// ninja only has one bounding sphere (for now!)

		for (int enemyBSIdx = 0; enemyBSIdx < enemy->getBoundingSpheres()->size(); enemyBSIdx++) {
				
			if (isColliding) {		// notify remaining spheres that they are not colliding (allows the ninja to hide)
				enemy->getBoundingSphere(enemyBSIdx)->isColliding(false);
			}
			else {
					
				isColliding = boundingSphereCollisionDetection(ninjaBoundingSphere, enemy->getBoundingSphere(enemyBSIdx));

				enemy->isColliding(isColliding);
				enemy->getBoundingSphere(enemyBSIdx)->isColliding(isColliding);

				if (isColliding && enemyBSIdx == 0) {
					ninja->isColliding(isColliding);
					ninjaBoundingSphere->isColliding(isColliding);
				}
			}
		}

		return isColliding;
	}

	bool CollisionManager::staticObjectCollisionDetection(Collidable* dynamicObject, Collidable* staticObject) {

		bool isColliding = false;
		BoundingSphere* dynamicObjBoundingSphere = dynamicObject->getBoundingSphere(0);		// ninja only has one bounding sphere (for now!)

		isColliding = boundingSphereCollisionDetection(dynamicObjBoundingSphere, staticObject->getBoundingSphere(0));
							
		dynamicObject->isColliding(isColliding);
		dynamicObjBoundingSphere->isColliding(isColliding);

		staticObject->isColliding(isColliding);
		staticObject->getBoundingSphere(0)->isColliding(isColliding);

		if (isColliding) {
			dynamicObject->isColliding(isColliding);
			dynamicObjBoundingSphere->isColliding(isColliding);
		}

		return isColliding;
	}

	bool CollisionManager::boundingSphereCollisionDetection(BoundingSphere* boundingSphere1, BoundingSphere* boundingSphere2) {
		
		cg::Vector3d v = boundingSphere1->getPosition() - boundingSphere2->getPosition();
		double minDistance = boundingSphere1->getRadius() + boundingSphere2->getRadius();
		double d = v[0] * v[0] + v[1] * v[1] + v[2] * v[2] - minDistance * minDistance;

		if (d < 0) {
			return true;
		}
		else {
			return false;
		}
	}
}