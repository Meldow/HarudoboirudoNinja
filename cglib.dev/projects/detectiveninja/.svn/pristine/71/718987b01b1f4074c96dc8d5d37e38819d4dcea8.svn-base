#include "CollisionManager.h"

namespace proj {

	CollisionManager::CollisionManager() : cg::Entity("CollisionManager") {}
	CollisionManager::~CollisionManager() {}

	void CollisionManager::init() {

		_enemies = new std::vector<Collidable*>();
		_staticObjects = new std::vector<Collidable*>();

		_map = (ImageLoaderHeightMap*)cg::Registry::instance()->get("mappedterrain");
	}

	void CollisionManager::update(unsigned long elapsed_millis) {

		heightMapCollisionDetection(_ninja);

		bool isColliding = false;
		for (int nb = 0; nb < _ninja->getBoundingSpheres()->size(); nb++) {

			if (isColliding){
				_ninja->getBoundingSphere(nb)->isColliding(false);
			}
			else {
				for (int e = 0; e < _enemies->size(); e++) {									
					for (int eb = 0; eb < _enemies->at(e)->getBoundingSpheres()->size(); eb++) {
				
						if (isColliding) {
							_enemies->at(e)->getBoundingSphere(eb)->isColliding(false);
						}
						else {
							isColliding = boundingSphereCollisionDetection(_ninja->getBoundingSphere(nb), _enemies->at(e)->getBoundingSphere(eb));
							
							_enemies->at(e)->isColliding(isColliding);
							_enemies->at(e)->getBoundingSphere(eb)->isColliding(isColliding);
						}
					}
				}
			}
		}
	}

	void CollisionManager::registerNinja(Collidable* ninja) {
		_ninja = ninja;
	}
	void CollisionManager::registerEnemy(Collidable* enemy) {
		_enemies->push_back(enemy);
	}
	void CollisionManager::registerStaticObject(Collidable* staticObject) {
		_staticObjects->push_back(staticObject);
	}

	bool CollisionManager::boundingSphereCollisionDetection(BoundingSphere* boundingSphere1, BoundingSphere* boundingSphere2) {
		
		cg::Vector3d v = boundingSphere1->getPosition() - boundingSphere2->getPosition();
		double minDistance = boundingSphere1->getRadius() + boundingSphere2->getRadius();
		double d = v[0] * v[0] + v[1] * v[1] + v[2] * v[2] - minDistance * minDistance;

		if (d < 0) {
			return true;
		}
		else {
			return false;
		}
	}

	void CollisionManager::heightMapCollisionDetection(Collidable* character) {

		cg::Vector3d pos = character->getPosition();
		/*int h = _map->Height(pos[0], pos[1]);

		if ((h - pos[2]) > 4) {

			_ninja->isColliding(true);
			_ninja->getBoundingSphere(0)->isColliding(true);
		}
		else {*/

			int roundPosX = (int) pos[0];
			int roundPosY = (int) pos[1];

			float fracPosX = pos[0] - roundPosX;
			float fracPosY = pos[1] - roundPosY;

			float avgHeight = _map->Height(roundPosX, roundPosY) * (1.0f - fracPosX) * (1.0f - fracPosY)
								+ _map->Height(roundPosX + 1, roundPosY) * fracPosX * (1.0f - fracPosY)
								+ _map->Height(roundPosX, roundPosY + 1) * (1.0f - fracPosX) * fracPosY
								+ _map->Height(roundPosX + 1, roundPosY + 1) * fracPosX * fracPosY;

			character->setHeight(avgHeight);
		//}
	}
}