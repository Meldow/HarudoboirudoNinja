#include "Light.h"

namespace proj {

	Light::Light(std::string id) : cg::Entity(id) {}
	Light::~Light() {}

	void Light::toggleLight() {
	
		_lightOn = !_lightOn;
		if (_lightOn) {
			glEnable(_lightConstant);
			printf("%s is on!\n", this->getId());
		}
		else {
			glDisable(_lightConstant);
			printf("%s is off!\n", this->getId());
		}
	}

	void Light::update(unsigned long elapsed_millis) {
	
		if(isDebug() && cg::KeyBuffer::instance()->isKeyDown(_controlLightKey)) {

			if(cg::KeyBuffer::instance()->isKeyDown('l') && _toggleLightKeyReleased) {
				toggleLight();
				_toggleLightKeyReleased = false;
			}
			if(cg::KeyBuffer::instance()->isKeyUp('l')) {
				_toggleLightKeyReleased = true;
			}
			if(cg::KeyBuffer::instance()->isKeyDown('u')) {
				_physics.goAhead();
			}
			if(cg::KeyBuffer::instance()->isKeyDown('j')) {
				_physics.goBack();
			}
			if(cg::KeyBuffer::instance()->isKeyDown('h')) {
				_physics.yawLeft();
			}
			if(cg::KeyBuffer::instance()->isKeyDown('k')) {
				_physics.yawRight();
			}
			if(cg::KeyBuffer::instance()->isKeyDown('g')) {
				_physics.pitchUp();
			}
			if(cg::KeyBuffer::instance()->isKeyDown('b')) {
				_physics.pitchDown();
			}
			if(cg::KeyBuffer::instance()->isKeyDown('v')) {
				_physics.rollLeft();
			}
			if(cg::KeyBuffer::instance()->isKeyDown('n')) {
				_physics.rollRight();
			}
		}

		double elapsed_seconds = elapsed_millis / (double)1000;
		_physics.step(elapsed_seconds);
	}

	void Light::draw() {
	
		glPushMatrix();
			_physics.applyTransforms();
			glCallList(_lightDL);
		glPopMatrix();

		if (isDebug()) {

			glPushMatrix();
				_physics.drawAxes();
			glPopMatrix();

			glDisable(GL_LIGHTING);

			glPushMatrix();
				_physics.applyTransforms();
				glColor3f(0.9f,0.9f,0.9f);
				glutWireCone(2.0f,2.0f,10,10);
			glPopMatrix();

			glEnable(GL_LIGHTING);
		}
	}
}