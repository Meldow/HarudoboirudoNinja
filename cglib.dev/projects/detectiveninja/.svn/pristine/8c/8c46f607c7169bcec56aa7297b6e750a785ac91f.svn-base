#include "Texture.h"

namespace proj {
	
	Texture::Texture(std::string fname, std::string fext) {
		_filename = fname;
		_fileextension = fext;
		init();
	}
	Texture::~Texture(){
	}

	void Texture::init() {
		//makeTexture();
	}

	GLuint Texture::loadTexture(std::string fn) {
		
		FREE_IMAGE_FORMAT fif = FIF_UNKNOWN;
		FIBITMAP *dib(0);
		BYTE* bits(0);
		GLuint gl_texID;
		unsigned int width(0), height(0);
		const char* filename = fn.c_str();
		
		
		fif = FreeImage_GetFileType(filename, 0);
		if(fif == FIF_UNKNOWN) {
			fif = FreeImage_GetFIFFromFilename(filename);
			return 0;
		}


		if(FreeImage_FIFSupportsReading(fif))
			dib = FreeImage_Load(fif, filename);
		if(!dib)
			return false;

		dib = FreeImage_ConvertTo24Bits(dib);
		bits = FreeImage_GetBits(dib);
		width = FreeImage_GetWidth(dib);
		height = FreeImage_GetHeight(dib);
		if((bits == 0) || (width == 0) || (height == 0))
			return 0;

		glGenTextures(1, &gl_texID);
		glBindTexture(GL_TEXTURE_2D, gl_texID);
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP);
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP);
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
		glTexEnvf(GL_TEXTURE_ENV,GL_TEXTURE_ENV_MODE,GL_MODULATE);
		glTexImage2D(GL_TEXTURE_2D, 0, 3, width, height, 0, GL_BGR, GL_UNSIGNED_BYTE, bits);
		// FreeImage loads textures in BGR format.

		FreeImage_Unload(dib);

		return gl_texID;
	}

	void Texture::makeTexture() {
		_textureDL = loadTexture(TEXTURE_LOCATION + _filename + "." + _fileextension);
		printf("TEXTURE DL é: %d\n", _textureDL);
	}

	GLuint Texture::getTextureDL() {
		return _textureDL;
	}

	std::string Texture::getName() {
		return _filename;
	}

	std::string Texture::getExtension() {
		return _fileextension;
	}
}