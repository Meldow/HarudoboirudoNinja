#ifndef HEIGHT_MAP_LOADER_H
#define HEIGHT_MAP_LOADER_H
#define _CRT_SECURE_NO_DEPRECATE	

#include "cg/cg.h"
#include <windows.h>									// Header File For Windows
#include <stdio.h>										// Header file for standard input output (IE, "FILE") (NEW)
#include <gl\gl.h>										// Header File For The OpenGL32 Library
#include <gl\glu.h>										// Header File For The GLu32 Library
//#include <gl\glaux.h>									// Header File For The Glaux Library



#pragma comment(lib, "opengl32.lib")					// Link OpenGL32.lib
#pragma comment(lib, "glu32.lib")						// Link Glu32.lib

#define		MAP_SIZE	  1024							// Size Of Our .RAW Height Map (NEW)
#define		STEP_SIZE	  16							// Width And Height Of Each Quad (NEW)
#define		HEIGHT_RATIO  1.5f							// Ratio That The Y Is Scaled According To The X And Z (NEW)


namespace proj {

	class HeightMapLoader : public cg::Entity,
		public cg::IDrawListener,
		public cg::IUpdateListener
	{
	private:
		HDC			hDC;										// Private GDI Device Context
		HGLRC		hRC;										// Permanent Rendering Context
		HWND		hWnd;										// Holds Our Window Handle
		HINSTANCE	hInstance;									// Holds The Instance Of The Application
		bool		keys[256];									// Array Used For The Keyboard Routine
		bool		active;										// Window Active Flag Set To TRUE By Default
		bool		fullscreen;									// Fullscreen Flag Set To TRUE By Default
		bool		bRender;									// Polygon Flag Set To TRUE By Default (NEW)
		BYTE g_HeightMap[MAP_SIZE*MAP_SIZE];					// Holds The Height Map Data (NEW)
		float scaleValue;										// Scale Value For The Terrain (NEW)
		LRESULT	CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);	// Declaration For WndProc

	public:
		HeightMapLoader(std::string id);
		~HeightMapLoader();
		
		void init();
		void update(unsigned long elapsed_millis);
		void draw();
		void LoadRawFile(LPSTR strName, int nSize, BYTE *pHeightMap);
		int Height(BYTE *pHeightMap, int X, int Y);
		void SetVertexColor(BYTE *pHeightMap, int x, int y);
		void RenderHeightMap(BYTE pHeightMap[]);
		
	};
}

#endif