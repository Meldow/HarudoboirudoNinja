#include "Light.h"

namespace proj {

	Light::Light(std::string id) : cg::Entity(id) {}
	Light::~Light() {}

	void Light::init() {

		_physics.setPosition(0.0, 0.0, 20.0);
		_physics.setLinearVelocity(100.0);
		_physics.setAngularVelocity(100.0);
		_physics.setAxesScale(10.0);

		GLfloat ambient_light[] =	{ 0.1f, 0.1f, 0.1f, 1.0f };
		GLfloat diffuse_light[] =	{ 0.9f, 0.9f, 0.9f, 1.0f };
		GLfloat specular_light[] =	{ 0.9f, 0.9f, 0.9f, 1.0f };

		glLightfv(GL_LIGHT0, GL_AMBIENT, ambient_light);
		glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse_light);
		glLightfv(GL_LIGHT0, GL_SPECULAR, specular_light);

		glEnable(GL_LIGHT0);

		makeLight();
	}

	inline
	void Light::makeLight() {

		float position[] = { 1.0, 1.0, 1.0, 0.0 };	// directional light
		_lightDL = glGenLists(1);

		assert(_lightDL != 0);

		glNewList(_lightDL, GL_COMPILE);
			glLightfv(GL_LIGHT0, GL_POSITION, position);
		glEndList();
	}

	void Light::update(unsigned long elapsed_millis) {

		if(cg::KeyBuffer::instance()->isKeyDown('t')) {
			_physics.goAhead();
		}
		if(cg::KeyBuffer::instance()->isKeyDown('g')) {
			_physics.goBack();
		}
		if(cg::KeyBuffer::instance()->isKeyDown('f')) {
			_physics.yawLeft();
		}
		if(cg::KeyBuffer::instance()->isKeyDown('h')) {
			_physics.yawRight();
		}
		if(cg::KeyBuffer::instance()->isKeyDown('r')) {
			_physics.pitchUp();
		}
		if(cg::KeyBuffer::instance()->isKeyDown('v')) {
			_physics.pitchDown();
		}
		if(cg::KeyBuffer::instance()->isKeyDown('b')) {
			_physics.rollLeft();
		}
		if(cg::KeyBuffer::instance()->isKeyDown('n')) {
			_physics.rollRight();
		}
		double elapsed_seconds = elapsed_millis / (double)1000;
		_physics.step(elapsed_seconds);
	}

	void Light::draw() {

		glPushMatrix();
			_physics.applyTransforms();
			glCallList(_lightDL);
		glPopMatrix();

		if (isDebug()) {

			glDisable(GL_LIGHTING);

			glPushMatrix();
				_physics.drawAxes();
			glPopMatrix();

			glPushMatrix();
				_physics.applyTransforms();
				glColor3f(0.9f,0.9f,0.9f);
				glTranslatef(0.4f,0.0f,0.0f);
				glRotatef(-90.0f,0.0f,1.0f,0.0f);
				glScalef(10.0,10.0,10.0);
				glutWireCone(0.4,0.4,10,10);
			glPopMatrix();

			glEnable(GL_LIGHTING);
		}
	}

	void Light::toggleDebugMode() {
		_isDebug = !_isDebug;
	}
}