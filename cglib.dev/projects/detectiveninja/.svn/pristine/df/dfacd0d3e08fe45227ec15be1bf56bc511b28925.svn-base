#include "Controller.h"

namespace proj {

	/* 
		Implementa listener e recebe info do teclado
	*/

	Controller::Controller() : cg::Entity("Controller") {
	}
	Controller::~Controller() {
	}
	void Controller::init() {
	}
	
	
	void Controller::onKeyPressed(unsigned char key) {
        //ESC to ShutDown App
		if (key == 27) { 
			static_cast<MenuManager*>(cg::Registry::instance()->get("MenuManager"))->ingameMenu();
        }
	}

	//on keyrelease para garantir que so ocorre uma vez
	void Controller::onKeyReleased(unsigned char key) {
		
		if (key == '1') {
			DebugManager* debugManager = dynamic_cast<DebugManager*>(cg::Registry::instance()->get("DebugManager"));
			if(debugManager->isDebugModeActive()) {
				debugManager->toggleMapDebugMode();
			}
		}
		if (key == '2') {
			DebugManager* debugManager = dynamic_cast<DebugManager*>(cg::Registry::instance()->get("DebugManager"));
			if(debugManager->isDebugModeActive()) {
				debugManager->togglePlayerDebugMode();
			}
		}
		if (key == '3') {
			DebugManager* debugManager = dynamic_cast<DebugManager*>(cg::Registry::instance()->get("DebugManager"));
			if(debugManager->isDebugModeActive()) {
				debugManager->toggleEnemyDebugMode();
			}
		}
		if (key == '4') {
			DebugManager* debugManager = dynamic_cast<DebugManager*>(cg::Registry::instance()->get("DebugManager"));
			if(debugManager->isDebugModeActive()) {
				debugManager->toggleStaticObjectDebugMode();
			}
		}
	}


	//faz notify de tudo o que esta no registo
	//todas as entidades criadas//destruidas, dentro do C:\Users\Alex\Documents\IST\AVT\cglib.dev\projects\detectiveninja\scripts\vs2010
	//pode(deve-se) alterar dump
	void Controller::onSpecialKeyReleased(int key) {
        if (key == GLUT_KEY_F1) {
			cg::Manager::instance()->getApp()->dump();
        }
		
		if(key == GLUT_KEY_F2) { 
			

			//DirectionalLight *directionalLight = (DirectionalLight*)cg::Registry::instance()->get("DirectionalLight");
			//directionalLight->switchDebug();

			//PositionalLight *positionalLight = (PositionalLight*)cg::Registry::instance()->get("PositionalLight0");
			//positionalLight->switchDebug();
			/*
			ImageLoaderHeightMap *map = (ImageLoaderHeightMap* )cg::Registry::instance()->get("mappedterrain");
			map->switchDebug();

			//Grid *grid = (Grid* )cg::Registry::instance()->get("grid1");
			//grid->switchDebug();

			ITargetable *ninja = dynamic_cast<ITargetable*>(cg::Registry::instance()->get("Ninja"));
			ninja->toggleDebug();

			//ITargetable *enemy0 = dynamic_cast<ITargetable*>(cg::Registry::instance()->get("enemy0"));
			//enemy0->toggleDebug();

			//ITargetable *enemy1 = dynamic_cast<ITargetable*>(cg::Registry::instance()->get("Enemy1"));
			//enemy1->toggleDebug();

			//ITargetable *dummyBox0 = dynamic_cast<ITargetable*>(cg::Registry::instance()->get("DummyBox0"));
			//dummyBox0->toggleDebug();

			//ITargetable *dummyBox1 = dynamic_cast<ITargetable*>(cg::Registry::instance()->get("DummyBox1"));
			//dummyBox1->toggleDebug();
			*/
			DebugManager* dm = dynamic_cast<DebugManager*>(cg::Registry::instance()->get("DebugManager"));
			dm->toggleDebugMode();
		}
		
		if(key == GLUT_KEY_F3) {
			Camera* camera = dynamic_cast<Camera*>( cg::Registry::instance()->get("Camera"));
			camera->mainCamera();
		}
		
		if(key == GLUT_KEY_F4) {
			if(static_cast<DebugManager*>(cg::Registry::instance()->get("DebugManager"))->isDebugModeActive()) {
				Camera* camera = dynamic_cast<Camera*>( cg::Registry::instance()->get("Camera"));
				camera->freeCamera();
			}
		}
	}
}